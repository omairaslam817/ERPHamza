
<PageTitle>RC Instructed</PageTitle>
@page "/RCInstructed"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }

</style>


<div class="card-header mt-2">
    <h5>RC Instructed</h5>
</div>
<AuthorizeView>
    <Authorized>
@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else
{
    <table class="table mt-12 mr-4 ml-4">
        <thead>
            <tr>
                <th class="col-1">#</th>
                <th class="col-3">RefNo</th>
                <th class="col-3">Address</th>
                <th class="col-3">Action</th>
            </tr>
        </thead>

        @if (formList.Count > 0)
        {
            <tbody>
                @foreach (var result in formList)
                {
                    <tr>
                        <td>@(formList.IndexOf(result) + 1)</td>
                        <td>@result.JobFormRecord.RefNo</td>
                        <td>@result.JobFormRecord.AddressLine1</td>
                        <td>
                             <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>
                        </td>
                      @*   @foreach (var trackRecord in formList.FirstOrDefault().TrackRCSRecords)
                        {
                            <th style="text-align: left">@trackRecord.Name</th>
                        } *@
                        @foreach (var trackRecord in result.TrackRCSRecords)
                        {
                            <td style="text-align: right">
                                <span style="display:flex">@trackRecord.Name</span>
                                <MudCheckBox Dense="true" Color="Color.Tertiary" Checked="@trackRecord.IsBooked" Disabled="true"></MudCheckBox>
                            </td>
                        }
                    </tr>
                }
                



            </tbody>
        }





    </table>
    @if (formList.Count == 0)
    {
        <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
    }


}

    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{
    public void GoToJob(ModelRoot result)
    {
        constant.FormId = result.JobFormRecord.Id;
        NavigationManager.NavigateTo("/job", true);
    }
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    bool loading = true;

    public int ID = 0;
    public string refno = "";

    private List<ModelRoot> formList = new List<ModelRoot>();
    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }
        public string LeadGenerator { get; set; }
        public string Scheme { get; set; }
        public string Surname { get; set; }
        public string Forename { get; set; }
        public string DOB { get; set; }
        public string PropertyNo { get; set; }
        public string AddressLine1 { get; set; }
        public string Town { get; set; }
        public string Postcode { get; set; }
        public object JobNote { get; set; } // Adjust the type as per actual JSON structure
    }

    public class TrackRCSRecord
    {
        public int Id { get; set; }
        public int FormNo { get; set; }
        public int StateId { get; set; }
        public object CurrentSId { get; set; } // Adjust the type as per actual JSON structure
        public bool IsBooked { get; set; }
        public string Name { get; set; }
    }

    public class ModelRoot
    {
        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public JobFormRecord JobFormRecord { get; set; }
        public List<TrackRCSRecord> TrackRCSRecords { get; set; }
    }



    protected override void OnInitialized()
    {

        //base.OnInitialized();
        //AutomateRcToCompleteJob.Form1BySat17();

        Form1BySat17();

    }
    public int myid = 0;
    public  void CountTrackRCSRecords(List<ModelRoot> formList)
    {
        
        var itemsToRemove = new List<ModelRoot>();

        foreach (var form in formList)
        {
            int totalRecords = form.TrackRCSRecords.Count;
            int bookedRecords = form.TrackRCSRecords.Count(record => record.IsBooked);
            if (totalRecords == bookedRecords)
            {
                myid = form.FormId;
                var dataToSend = form.TrackRCSRecords.Select(q => new { q.Id }).ToList();

                DeleteTrackRCSRecords.DeleteTRCSRecord(dataToSend);

                DeleteRecordClass.DeleteRecordInFormJob(myid, 17);
                AddRecordClass.AddRecordInFormJob(myid, 18);
                AuditClasss.Audit(myid, constant.LoginUserName, DateTime.Now, "Project Complete");
                itemsToRemove.Add(form);
                StateHasChanged();
            }

        }
        foreach (var item in itemsToRemove)
        {
            formList.Remove(item);
        }

        StateHasChanged();

    }


    private async Task DeleteBetWeenIn()
    {
        using (var httpClient = new HttpClient())
            try
            {
                var data = new
                {
                    formId = myid

                };
                var json = JsonConvert.SerializeObject(data);
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.AutoIdsDelete, content);

                return;

            }
    
            catch (Exception e)
            {

                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }
}
    private async Task Form1BySat17()
    {
        using (var httpClient = new HttpClient())
            try
            {
                var response = await httpClient.GetAsync(constant.GetJobForRcInst );
                if (response.IsSuccessStatusCode)
                {


                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<ModelRoot>>(jsonString).ToList();
                    loading = false;

                    CountTrackRCSRecords(formList);
                    DeleteBetWeenIn();
                    StateHasChanged();
                }
                else
                {
                    loading = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {

                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }


    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog(DialogOptions options, ModelRoot result)
    {
        constant.FormId = result.FormId;
        constant.refno = result.JobFormRecord.RefNo;
        // LoadForm1Data();
        DialogService.Show<ViewJobDetailsDialog>("Custom Options Dialog", options);
    }
    private void OpenDialog2(DialogOptions options, ModelRoot result)
    {

        constant.FormId = result.JobFormRecord.Id;
        // LoadForm1Data();
        DialogService.Show<RcInstructConfirmDialog>("Custom Options Dialog", options);
    }






}

