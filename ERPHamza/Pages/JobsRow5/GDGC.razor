<PageTitle>GDGC</PageTitle>
@page "/GDGC"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }

</style>


<div class="card-header mt-2">
    <h5>GDGC Done</h5>
</div>
<AuthorizeView>
    <Authorized>
@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else
{
    <table class="table mt-12 mr-4 ml-4">
        <thead>
            <tr>
                <th class="col-1">#</th>
                <th class="col-3">RefNo</th>
                <th class="col-3">Address</th>
                <th class="col-5" style="text-align: center;">Action</th>
            </tr>
        </thead>

        @if (formList.Count > 0)
        {
            <tbody>
                @foreach (var result in formList)
                {

                    <tr>
                        <th scope="row">@(formList.IndexOf(result) + 1)</th>
                        <td>@result.JobFormRecord.RefNo</td>
                        <td>@result.JobFormRecord.AddressLine1</td>
                        <td>
                             <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>
                            <MudButton Variant="Variant.Outlined" OnClick="@((e)=>ShowConfirmationSubmidone(result))" Color="Color.Success">Submission Done</MudButton>

                        </td>
                    </tr>

                }
            </tbody>
        }
    </table>

    @if (formList.Count == 0)
    {
        <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
    }

    <MudOverlay @bind-Visible="PopUpSubmidone" DarkBackground="true" AutoClose="false">
        <MudPopover Open="@PopUpSubmidone" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Funder Name</MudText>
                    @if (loadedFN)
                    {
                        <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Funder Name" @bind-Value="selectedFunderName">
                            <MudSelectItem T="string" Value="null" Label="Select" />
                            @foreach (var make in MakeList)
                            {
                                <MudSelectItem Value="make" Label="@make" />
                            }
                        </MudSelect>
                    }




                </MudCardContent>
                <MudCardActions Style="justify-content:end">
                    <MudButton OnClick="closeConfirmationSubmidone" Color="Color.Error">Cancel</MudButton>
                    <MudButton OnClick="UpdateJobFunderName2" Color="Color.Success">Ok</MudButton>
                </MudCardActions>
            </MudCard>

        </MudPopover>
    </MudOverlay>
}

    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{public void GoToJob(FormModel result){constant.FormId = result.JobFormRecord.Id;NavigationManager.NavigateTo("/job", true);}
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    DateTime londonTime;
    private async Task UpdateJobFunderName2()
    {
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
        try
        {
            if (string.IsNullOrEmpty(selectedFunderName))
            {
                Snackbar.Add("Funder name is required", Severity.Error);
                return;
            }
            var client = new HttpClient();
            var response = await client.PostAsJsonAsync(constant.UpdateJobFunderName2, new { Id = constant.FormId, FunderName2 = selectedFunderName });
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Snackbar.Add(content, Severity.Success);
                PopUpSubmidone = false;
                DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 20);
                AddRecordClass.AddRecordInFormJob(constant.FormId, 22);
                AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Submisstion Done");
                var obj = formList.FirstOrDefault(x => x.FormId == constant.FormId);
                formList.Remove(obj);
                StateHasChanged();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception e)
        {

            Snackbar.Add(e.ToString(), Severity.Error);
        }
    }



    private bool PopUpSubmidone = false;
    private void ShowConfirmationSubmidone(FormModel result)
    {

        constant.FormId = result.JobFormRecord.Id;
        FunderNameList();
        PopUpSubmidone = true;


    }
    private void closeConfirmationSubmidone()
    {
        constant.FormId = 0;
        PopUpSubmidone = false;

    }
    private bool loadedFN = false;
    private string selectedFunderName;
    private List<string> MakeList;
    private async Task FunderNameList()
    {
        try
        {



            var client = new HttpClient();
            var response = await client.GetAsync(constant.GetFunderName);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                MakeList = JsonConvert.DeserializeObject<List<string>>(content);
                loadedFN = true;
                StateHasChanged();

            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception e)
        {

            Snackbar.Add(e.ToString(), Severity.Error);
        }
    }





    bool loading = true;

    public int ID = 0;
    public string refno = "";

    private List<FormModel> formList = new List<FormModel>();
    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }

        public string AddressLine1 { get; set; }

        public string SurveyName { get; set; }

        public int Status { get; set; }
        public Nullable<bool> isLogemnt { get; set; }
    }
    public class FormModel
    {
        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public JobFormRecord JobFormRecord { get; set; }
    }




    protected override void OnInitialized()
    {

        //base.OnInitialized();

        Form1BySat20();
    }

    private async Task Form1BySat20()
    {
        using (var httpClient = new HttpClient())
            try
            {
                var response = await httpClient.GetAsync(constant.Form1BySat20);
                if (response.IsSuccessStatusCode)
                {


                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormModel>>(jsonString).ToList();
                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    loading = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {

                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog(DialogOptions options, FormModel result)
    {
        constant.FormId = result.FormId;
        constant.refno = result.JobFormRecord.RefNo;
        // LoadForm1Data();
        DialogService.Show<ViewJobDetailsDialog>("Custom Options Dialog", options);
    }






}




