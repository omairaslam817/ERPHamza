<PageTitle>Installation Done</PageTitle>
@page "/InstallsDone"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }

</style>


<div class="card-header mt-2">
    <h5>Installed Jobs</h5>
</div>






@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else
{
    <table class="table mt-12 mr-4 ml-4">
        <thead>
            <tr>
                <th class="col-1">#</th>
                <th class="col-3">RefNo</th>
                <th class="col-3">Address</th>
                <th class="col-5" style="text-align: center;">Action</th>
            </tr>
        </thead>

        @if (formList.Count > 0)
        {
            <tbody>
                @foreach (var result in formList)
                {

                    <tr>
                        <th scope="row">@(formList.IndexOf(result) + 1)</th>
                        <td>@result.JobFormRecord.RefNo</td>
                        <td>@result.JobFormRecord.AddressLine1</td>
                        <td>
                             <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>
                            @* <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="@((e) => OpenDialog2(maxWidth,result))">Post Stage Request</MudButton> *@
                            @if (result.JobFormRecord.isPostStateReq ?? false)
                            {
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" OnClick="@((e) => ShowConfirmation2(result))" Color="Color.Success">Post Stage Recive</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="@((e) => ShowConfirmation(result))">Post Stage Request</MudButton>
                            }
                            
                            
                        </td>
                    </tr>

                }
            </tbody>
        }
    </table>

    <MudOverlay @bind-Visible="PopUpInsDate" DarkBackground="true" AutoClose="false">
        <MudPopover Open="@PopUpInsDate" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

            <MudCard>
                <MudCardHeader Style="border-bottom:1px solid #DEE2E6">
                    <MudText Typo="Typo.h5">Post Stage Dates</MudText>
                </MudCardHeader>
                <MudCardContent>

                    <MudGrid>
                        <MudItem xs="12" md="4">
                            @if (tbmkloaded)
                            {
                                <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Measures" @bind-Value="selectedItem" Required="true">
                                    <MudSelectItem T="string" Value="null" Label="Measures" />
                                    @foreach (var Generator in MeasureList)
                                    {
                                        <MudSelectItem T="string" Value="Generator" Label="@Generator" />
                                    }
                                </MudSelect>
                            }
                        </MudItem>
                        <MudItem xs="12" md="6">
                            <MudDateRangePicker DateFormat="dd/MM/yyyy" Margin="Margin.Dense" Variant="Variant.Outlined" Required="true" Editable="true" PlaceholderStart="Start Date" PlaceholderEnd="End Date" Clearable="true" @bind-DateRange="selectedDateRange" Label="Date Range" />
                        </MudItem>
                        <MudItem xs="12" md="2" Style="margin-top:5px">
                            <MudButton Margin="Margin.Dense" Variant="Variant.Filled" Color="Color.Primary" OnClick="AddData">Add</MudButton>
                        </MudItem>
                    </MudGrid>
                    <MudTable Items="addedItems" Dense="true">
                        <HeaderContent>
                            <MudTh>Measure</MudTh>
                            <MudTh>Start Date</MudTh>
                            <MudTh>End Date</MudTh>
                            <MudTh>Action</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Item">@context.Item</MudTd>
                            <MudTd DataLabel="Start Date">@context.StartDate.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd DataLabel="End Date">@context.EndDate.ToString("dd/MM/yyyy")</MudTd>
                            <MudTd DataLabel="Action">
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveData(context)" />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>




                </MudCardContent>
                <MudCardActions Style="justify-content:end">
                    <MudButton OnClick="closeConfirmation" Color="Color.Error">Cancel</MudButton>
                    <MudButton OnClick="GetData" Color="Color.Success">Ok</MudButton>
                </MudCardActions>
            </MudCard>
        </MudPopover>
    </MudOverlay>

    <MudOverlay @bind-Visible="PopUpConfirm" DarkBackground="true" AutoClose="false">
        <MudPopover Open="@PopUpConfirm" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Confirmation</MudText>
                    <MudText Typo="Typo.body2">
                        Are you sure you want to perform this action? <b>This process cannot be undone.</b>
                    </MudText>
                </MudCardContent>
                <MudCardActions Style="justify-content:end">
                    <MudButton OnClick="closeConfirmation2" Color="Color.Error">Cancel</MudButton>
                    <MudButton OnClick="UpdateJobBooked19" Color="Color.Success">Ok</MudButton>
                </MudCardActions>
            </MudCard>

        </MudPopover>
    </MudOverlay>



    @if (formList.Count == 0)
    {
        <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
    }


}


@code{public void GoToJob(FormModel result){constant.FormId = result.JobFormRecord.Id;NavigationManager.NavigateTo("/job", true);}

    bool tbmkloaded = false;
    private string selectedItem;
    private List<string> MeasureList;

    private DateRange selectedDateRange = new DateRange(DateTime.Now, DateTime.Now.AddDays(1));
    private List<AddedItem> addedItems = new List<AddedItem>();

    private void AddData()
    {
        if (!string.IsNullOrEmpty(selectedItem) && selectedDateRange.Start.HasValue && selectedDateRange.End.HasValue)
        {
            if (IsItemAlreadyAdded(selectedItem, selectedDateRange.Start.Value, selectedDateRange.End.Value))
            {
                Snackbar.Add("Already added.", Severity.Error);
            }
            else
            {
                addedItems.Add(new AddedItem
                    {
                        Item = selectedItem,
                        StartDate = selectedDateRange.Start.Value,
                        EndDate = selectedDateRange.End.Value
                    });
                selectedItem = null;
                selectedDateRange = new DateRange(DateTime.Now, DateTime.Now.AddDays(1));
            }
        }
    }

    private bool IsItemAlreadyAdded(string item, DateTime startDate, DateTime endDate)
    {

        return addedItems.Any(i => i.Item == item && i.StartDate.Date == startDate.Date && i.EndDate.Date == endDate.Date);
    }

    private void RemoveData(AddedItem item)
    {
        addedItems.Remove(item);
    }
    public void GetData()
    {
        var dataToSend = addedItems
            .Select(q => new { q.Item, q.StartDate, q.EndDate, FormId = constant.FormId })
            .ToList();
        if (dataToSend.Count == 0)
        {
            Snackbar.Add("Please add atleast one record", Severity.Error);

        }
        else
        {
            using (var httpClient = new HttpClient())
                try
                {
                    var json = JsonConvert.SerializeObject(dataToSend);
                    var content = new StringContent(json, Encoding.UTF8, "application/json");
                    var client = new HttpClient();
                    var response = client.PostAsync(constant.AddMeasures, content).Result;
                    if (response.IsSuccessStatusCode)
                    {
                        Snackbar.Add("Data added successfully", Severity.Success);
                        UpdateCHKL.UpdateCHKList(new { Id = constant.FormId, isPostStateReq = true });
                        closeConfirmation();
                        NavigationManager.NavigateTo("/InstallsDone", true);

                    }
                    else
                    {
                        var errorMessage = response.Content.ReadAsStringAsync().Result;
                        Snackbar.Add(errorMessage, Severity.Error);
                    }
                }catch(Exception e)
                {
                    Snackbar.Add("Try Catch Error: " + e, Severity.Error);
                }

        }


    }


    public class AddedItem
    {
        public string Item { get; set; }
        public int FormId { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
    }
    private async Task GetMeasureList()
    {
        var client = new HttpClient();
        var response = await client.GetAsync(constant.GetMeasure);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            MeasureList = JsonConvert.DeserializeObject<List<string>>(content);

            tbmkloaded = true;
            StateHasChanged();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Snackbar.Add(errorMessage, Severity.Error);
        }
    }







    private bool PopUpInsDate = false;
    private void ShowConfirmation(FormModel result)
    {
        GetMeasureList();
        constant.FormId = result.JobFormRecord.Id;
        PopUpInsDate = true;


    }
    private void closeConfirmation()
    {

        PopUpInsDate = false;
        addedItems.Clear();
    }


    //-------------------------------------------------------------

    private bool PopUpConfirm = false;
    private void ShowConfirmation2(FormModel result)
    {

        constant.FormId = result.JobFormRecord.Id;
        PopUpConfirm = true;


    }
    private void closeConfirmation2()
    {
        constant.FormId = 0;
        PopUpConfirm = false;

    }
    DateTime londonTime;
    public void UpdateJobBooked19()
    {
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
        if (constant.FormId == 0)
        {
            Snackbar.Add("Please select a record", Severity.Error);
            return;
        }


        DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 18);
        AddRecordClass.AddRecordInFormJob(constant.FormId, 19);
        AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Installs Done");
        var obj = formList.FirstOrDefault(x => x.FormId == constant.FormId);
        formList.Remove(obj);
        closeConfirmation2();
        //NavigationManager.NavigateTo("/InstallsDone", true);
    }







    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
    private void OpenDialog2(DialogOptions options, FormModel result)
    {

        constant.FormId = result.JobFormRecord.Id;
        DialogService.Show<InstallJobsDialog>("Confirmation");
    }

    bool loading = true;

    public int ID = 0;
    public string refno = "";

    private List<FormModel> formList = new List<FormModel>();
    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }

        public string AddressLine1 { get; set; }

        public string SurveyName { get; set; }

        public int Status { get; set; }
        public Nullable<bool> isPostStateReq { get; set; }
    }
    public class FormModel
    {
        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public JobFormRecord JobFormRecord { get; set; }
    }




    protected override void OnInitialized()
    {

        //base.OnInitialized();




        Form1BySat18();
        if (string.IsNullOrEmpty(constant.LoginUserName))
        {
            NavigationManager.NavigateTo("/", true);
        }

    }

    private async Task Form1BySat18()
    {
        using (var httpClient = new HttpClient())
            try
            {
                var response = await httpClient.GetAsync(constant.Form1BySat18);
                if (response.IsSuccessStatusCode)
                {


                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormModel>>(jsonString).ToList();
                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    loading = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {

                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }


   // DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog(DialogOptions options, FormModel result)
    {
        constant.FormId = result.FormId;
        constant.refno = result.JobFormRecord.RefNo;
        // LoadForm1Data();
        DialogService.Show<ViewJobDetailsDialog>("Custom Options Dialog", options);
    }







}


