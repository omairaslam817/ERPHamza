@page "/AssignToInspection"
<title>Assign To Inspection</title>
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using ERPHamza.Pages.JobsRow3
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }
    /* // */
    .mud-input-control-input-container {
        
        margin-top: -12px;
    }
</style>


<div class="card-header mt-2">
    <h5>Assign To Inspection</h5>
</div>
<AuthorizeView>
    <Authorized>
@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else
{
    <table class="table mt-12 mr-4 ml-4">
        <thead>
            <tr>
                <th class="col-1">#</th>
                <th class="col-1">RefNo</th>
                <th class="col-1">Address</th>
                <th class="col-1">Company</th>
                <th class="col-1">Measure</th>
                <th class="col-1">Inspection</th>
                <th class="col-1">MonthRef</th>
                <th class="col-1">Status</th>
                <th class="col-5" style="text-align: center;">Action</th>
            </tr>
        </thead>

        @if (formList.Count > 0)
        {
            <tbody>
                @foreach (var result in formList)
                {

                    <tr>
                        <th scope="row">@(formList.IndexOf(result) + 1)</th>
                        <td>@result.JobFormRecord.RefNo</td>
                        <td>@result.JobFormRecord.AddressLine1</td>
                        <td>@result.AssignedToJobDetailRecord.Company</td>
                        <td>@result.AssignedToJobDetailRecord.Measure</td>
                        <td>@result.AssignedToJobDetailRecord.Inspection</td>
                        <td>@result.AssignedToJobDetailRecord.Month</td>
                        <td>
                           @*  <MudSelect Immediate="true"  @bind-Value="jobStatus" OnClose="@(()=>OnStatusChange(result))"> *@
                            <MudSelect  Margin="Margin.None" @bind-Value="result.AssignedToJobDetailRecord.Status" OnClose="@(() => OnStatusChange(result))">
                                <MudSelectItem Value=@("In Process")>In Process</MudSelectItem>
                                <MudSelectItem Value=@("No Access")>No Access</MudSelectItem>
                                <MudSelectItem Value=@("Challenged")>Challenged</MudSelectItem>
                                <MudSelectItem Value=@("Pass")>Pass</MudSelectItem>
                                <MudSelectItem Value=@("Fail")>Fail</MudSelectItem>
                            </MudSelect>
                        </td>
                        <td>
                             @*  <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="@((e) => ShowConfirmation(result))">Change Status</MudButton> *@
                            @if (result.ShowSaveButton)
                            {
                                <MudButton OnClick="@(() => SaveStatusAsync(result))" Variant="Variant.Filled" Color="Color.Success">Save Changes</MudButton>
                            }
                             <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>
                             <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@((e) => ShowConfirmation(result))">Delete</MudButton> 
                        </td>
                    </tr>

                }
            </tbody>
        }





    </table>
    <MudOverlay @bind-Visible="PopUpConfirm" DarkBackground="true" AutoClose="false">
        <MudPopover Open="@PopUpConfirm" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Confirmation</MudText>
                    <MudText Typo="Typo.body2">
                        Are you sure you want to perform this action? <b>This process cannot be undone.</b>
                    </MudText>
                </MudCardContent>
                <MudCardActions Style="justify-content:end">
                    <MudButton OnClick="closeConfirmation" Color="Color.Error">Cancel</MudButton>
                    <MudButton OnClick="DeleteRecord" Color="Color.Success">Ok</MudButton>
                </MudCardActions>
            </MudCard>

        </MudPopover>
    </MudOverlay>













    @if (formList.Count == 0)
    {
        <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
    }


}

    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{public void GoToJob(FormModel result){constant.FormId = result.JobFormRecord.Id;NavigationManager.NavigateTo("/job", true);}
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }



    private void DeleteRecord()
    {
        DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 46);
        var obj = formList.FirstOrDefault(x => x.FormId == constant.FormId);
        formList.Remove(obj);
        PopUpConfirm = false;
        StateHasChanged();
     
    }


    private void OnStatusChange(FormModel result)
    {
        result.ShowSaveButton = true;
        StateHasChanged();
    }

    private async Task SaveStatusAsync(FormModel result)
    {
        using (var httpClient = new HttpClient())
        {
            try
            {
                var data = new
                {
                    Id=result.AssignedToJobDetailRecord.Id,
                    FormNo = result.AssignedToJobDetailRecord.FormNo,
                    Status = result.AssignedToJobDetailRecord.Status
                };
                var json = JsonConvert.SerializeObject(data);
                var stringContent = new StringContent(json, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.UpdateAssignedJobStatus, stringContent);

                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Status Updated", Severity.Success);
                    result.ShowSaveButton = false;
                }
                else
                {
                    // Get the response content and show it in the Snackbar
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add("Error: " + errorMessage, Severity.Error);
                }
            }
            catch (Exception e)
            {
                result.ShowSaveButton = false;
                Snackbar.Add("Try Catch Error: " + e.Message, Severity.Error);
            }
        }
    }
















    private bool PopUpConfirm = false;

    private void ShowConfirmation(FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        PopUpConfirm = true;


    }
    private void closeConfirmation()
    {
        constant.FormId = 0;
        PopUpConfirm = false;
    }


    bool loading = true;

    public int ID = 0;
    public string refno = "";

    private List<FormModel> formList = new List<FormModel>();

    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }

        public string AddressLine1 { get; set; }

        public string SurveyName { get; set; }

        public int Status { get; set; }
    }
    public class AssignedToJobDetailModel
    {
        public int Id { get; set; }
        public int FormNo { get; set; }
        public string Company { get; set; }
        public string Measure { get; set; }
        public string Inspection { get; set; }
        public string Month { get; set; }
        public string Status { get; set; }
    }
    public class FormModel
    {

        public JobFormRecord JobFormRecord { get; set; }
        public AssignedToJobDetailModel AssignedToJobDetailRecord { get; set; }

        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public bool ShowSaveButton { get; set; } = false; // Controls Save button visibility


    }




    protected override void OnInitialized()
    {

        //base.OnInitialized();

        Form1BySat46();
    }

    private async Task Form1BySat46()
    {
        using (var httpClient = new HttpClient())
            try
            {
                var response = await httpClient.GetAsync(constant.Form1BySat46);
                if (response.IsSuccessStatusCode)
                {


                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormModel>>(jsonString).ToList();
                    

                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    loading = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {

                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }
    DateTime londonTime;






    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog(DialogOptions options, FormModel result)
    {

        constant.refno = result.JobFormRecord.RefNo;
        DialogService.Show<ViewJobDetailsDialog>("Custom Options Dialog", options);
    }

}






