
@page "/Job"
@using ERPHamza.Data
@using ERPHamza.Data.MyClasses
@using MudBlazor
@using Newtonsoft.Json
@using System.Net.Http.Json
@using System.Text;
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
<PageTitle>Job Status</PageTitle>

<style>
	.ex3 {
		
		width:100%;
		overflow: auto;
	}

	.box {
		float: left;
		padding: 0 8px;
		box-sizing: border-box;
	}

		.box > div {
			background-color: #aaa;
		}

	.spaced-list li {
		margin-bottom: 10px; /* Adjust the value as needed */
	}
</style>


<AuthorizeView>
    <Authorized>




<div style="width:100%; display:flex" class="mt-3 ml-7">
	<div >
		<MudButton Href="/CheckList" Variant="Variant.Filled" Color="Color.Primary">FULL CHECKLiST</MudButton>
	</div>
	<div class="ml-2">
		<MudButton OnClick="ShowConfirmation" Variant="Variant.Filled" Color="Color.Primary">ASSiGN JOB</MudButton>
	</div>
	<div class="ml-2">
		<MudButton OnClick="OpenOverlayPopup" Variant="Variant.Filled" Color="Color.Primary">ADD NOTE</MudButton>
	</div>
	<div class="ml-2">
		<MudButton OnClick="ShowConfirmationCanceljob" Variant="Variant.Filled" Color="Color.Primary">Cancel Job</MudButton>
	</div>
	<div class="ml-2">
		<MudButton OnClick="ShowConfirmationRejectjob" Variant="Variant.Filled" Color="Color.Primary">Reject Job</MudButton>
	</div>

</div>


<h3 class="mt-3 ml-7"><b>Job Status</b></h3>






<div style="width:100%; display:flex" class="ml-7">
	   <div style="width:20%">
		@if (CurrentId == 1)
			{
				<MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
				<h6 >
					DATAMATCHED
				</h6>
				<p style="font-size:10px;">
					(Awaiting Survey Booking
				</p>
				</MudPaper>
			}
			else
			{
			<MudPaper Class="pa-2 ma-2" Elevation="3">
					<h6>
						DATAMATCHED
					</h6>
					<p style="font-size:10px;">
						(Awaiting Survey Booking
					</p>
				</MudPaper>
			}
		</div>
	   
		<div style="width:20%">
		@if (CurrentId == 2)
			{
			<MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
					<h6>
						SURVEY BOOKED
					</h6>
					<p style="font-size:10px;">
						(Awaiting Survey Evidences)
					</p>
				</MudPaper>
			}
			else
			{
			<MudPaper Class="pa-2 ma-2" Elevation="3">
					<h6>
						SURVEY BOOKED
					</h6>
					<p style="font-size:10px;">
						(Awaiting Survey Evidences)
					</p>
				</MudPaper>
			}

	   </div>

	   <div style="width:20%">
		@if (CurrentId == 3)
		{
			<MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
				<h6>
					SUVERY DONE
				</h6>
				<p style="font-size:10px;">
					(Awaiting for EPR)
				</p>
			</MudPaper>
		}
		else
		{
			<MudPaper Class="pa-2 ma-2" Elevation="3">
				<h6>
					SUVERY DONE
				</h6>
				<p style="font-size:10px;">
					(Awaiting for EPR)
				</p>
			</MudPaper>
		}

	   </div>

	   <div style="width:20%">
		@if (CurrentId == 4)
		   {
                <MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
                     <h6>
                          EPR Done (w/o CC)
                     </h6>
                     <p style="font-size:10px;">
                          (Awaiting for Agreement)
                     </p>
                </MudPaper>
              }
              else
              {
                <MudPaper Class="pa-2 ma-2" Elevation="3">
                     <h6>
                          EPR Done (w/o CC)
                     </h6>
                     <p style="font-size:10px;">
                          (Awaiting for Agreement)
                     </p>
                </MudPaper>
              }
	   </div>

	   <div style="width:20%">
		@if (CurrentId == 5)
              {
                 <MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
                        <h6>
                              EPR Done (With CC)
                        </h6>
                        <p style="font-size:10px;">
                              (Awaiting for contribution)
                        </p>
                 </MudPaper>
                  }
                  else
                  {
                 <MudPaper Class="pa-2 ma-2" Elevation="3">
                        <h6>
                              EPR Done (With CC)
                        </h6>
                        <p style="font-size:10px;">
                              (Awaiting for contribution)
                        </p>
                 </MudPaper>
                  }
	   </div>
		
	   <div style="width:20%">
		@if (CurrentId == 6)
		{
                <MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
                    <h6>
                        Customer Agreed
                    </h6>
                    <p style="font-size:10px;">
                        (Awaiting Install work)
                    </p>
                </MudPaper>
            }
            else
            {
                <MudPaper Class="pa-2 ma-2" Elevation="3">
                    <h6>
                        Customer Agreed
                    </h6>
                    <p style="font-size:10px;">
                        (Awaiting Install work)
                    </p>
                </MudPaper>
            }
		</div>
		
		<div style="width:20%">
		@if (CurrentId == 8)
		{
			<MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
				<h6>
					Ipad Queue
				</h6>
				<p style="font-size:10px;">
					&nbsp;
				</p>
			</MudPaper>
            }
            else
            {
			<MudPaper Class="pa-2 ma-2" Elevation="3">
				<h6>
					Ipad Queue
				</h6>
				<p style="font-size:10px;">
					&nbsp;
				</p>
			</MudPaper>
            }

		</div>
		
		<div style="width:20%">
		@if (CurrentId == 44)
		{
			<MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
				<h6>
					Ipad Completed
				</h6>
				<p style="font-size:10px;">
					&nbsp;
				</p>
			</MudPaper>
		}
		else
                     {
			<MudPaper Class="pa-2 ma-2" Elevation="3">
				<h6>
					Ipad Completed
				</h6>
				<p style="font-size:10px;">
					&nbsp;
				</p>
			</MudPaper>
                     }

	   </div>
		
	   <div style="width:20%">
		@if (CurrentId == 17)
		{
			<MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
				<h6>
					RC Instructed
				</h6>
				<p style="font-size:10px;">
					(Awaiting Installation)
				</p>
			</MudPaper>
		}
		else
		{
			<MudPaper Class="pa-2 ma-2" Elevation="3">
				<h6>
					RC Instructed
				</h6>
				<p style="font-size:10px;">
					(Awaiting Installation)
				</p>
			</MudPaper>
		}

		</div>
   </div>

   @* 2ND ROW *@

	<div style="width:100%; display:flex" class="ml-7">
		<div style="width:20%">
		@if (CurrentId == 18)
		{
			<MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
				<h6>
					Project Completed
				</h6>
				<p style="font-size:10px;">
					(Awaiting Survey Evidences)
				</p>
			</MudPaper>
		}
		else
		{
			<MudPaper Class="pa-2 ma-2" Elevation="3">
				<h6>
					Project Completed
				</h6>
				<p style="font-size:10px;">
					(Awaiting Survey Evidences)
				</p>
			</MudPaper>
		}

		</div>
		<div style="width:20%">
		@if (CurrentId == 19)
		{

			<MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
				<h6>
					Post Stage Done
				</h6>
				<p style="font-size:10px;">
					(Awaiting IBG Insurance)
				</p>
			</MudPaper>
		}
		else
		{
			<MudPaper Class="pa-2 ma-2" Elevation="3">
				<h6>
					Post Stage Done
				</h6>
				<p style="font-size:10px;">
					(Awaiting IBG Insurance)
				</p>
			</MudPaper>
		}
		
		</div>
		<div style="width:20%">
		@if (CurrentId == 20)
        {
            <MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
				<h6>
					GDGC Done
				</h6>
				<p style="font-size:10px;">
					(Awaiting Lodgement)
				</p>
            </MudPaper>
        }
        else
        {
			<MudPaper Class="pa-2 ma-2" Elevation="3">
				<h6>
					GDGC Done
				</h6>
				<p style="font-size:10px;">
					(Awaiting Lodgement)
				</p>
			</MudPaper>
        }

		</div>
		<div style="width:20%">
		@if (CurrentId == 21)
        {
            <MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
                <h6>
                    Lodgement Done
                </h6>
                <p style="font-size:10px;">
                    (Awaiting Submission)
                </p>
            </MudPaper>
        }
        else
        {
			<MudPaper Class="pa-2 ma-2" Elevation="3">
				<h6>
					Lodgement Done
				</h6>
				<p style="font-size:10px;">
					(Awaiting Submission)
				</p>
			</MudPaper>
        }

		</div>
		<div style="width:20%">
		@if (CurrentId == 22)
        {
            <MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
                <h6>
                    Submission Done
                </h6>
                <p style="font-size:10px;">
                    (Awaiting Funder Queries)
                </p>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="pa-2 ma-2" Elevation="3">
                <h6>
                    Submission Done
                </h6>
                <p style="font-size:10px;">
                    (Awaiting Funder Queries)
                </p>
            </MudPaper>
        }
		</div>
	<div style="width:20%">
		@if (CurrentId == 23)
        {
            <MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
                <h6>
                    Funder Queries
                </h6>
                <p style="font-size:10px;">
                    (Awaiting Q-Completion)
                </p>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="pa-2 ma-2" Elevation="3">
                <h6>
                    Funder Queries
                </h6>
                <p style="font-size:10px;">
                    (Awaiting Q-Completion)
                </p>
            </MudPaper>
        }
	</div>
			<div style="width:20%">
		@if (CurrentId == 24)
        {
            <MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
				<h6>
					Job Closed
				</h6>
				<p style="font-size:10px;">
					(Awaiting Payment)
				</p>
            </MudPaper>
        }
        else
        {
			<MudPaper Class="pa-2 ma-2" Elevation="3">
				<h6>
					Job Closed
				</h6>
				<p style="font-size:10px;">
					(Awaiting Payment)
				</p>
			</MudPaper>
        }

		</div>
	<div style="width:20%">
		@if (CurrentId == 23)
        {
            <MudPaper Style="background-color:#3E2CDD;color:white" Class="pa-2 ma-2" Elevation="3">
                <h6>
                    Payment Received
                </h6>
                <p style="font-size:10px;">
                    (Awaiting Payment)
                </p>
            </MudPaper>
        }
        else
        {
            <MudPaper Class="pa-2 ma-2" Elevation="3">
                <h6>
                    Payment Received
                </h6>
                <p style="font-size:10px;">
                    (Awaiting Payment)
                </p>
            </MudPaper>
        }
	</div>
	<div style="width:20%">

		<MudPaper Class="pa-2 ma-2" Elevation="3">
			<h6>
				Archived Jobs
			</h6>
			<p style="font-size:10px;">
				(All)
			</p>
		</MudPaper>
	</div>
</div>

<div class="mt-3 ml-7" style="width: 100%;">
	<div style="width: 30%; float: left;">
		<h3>Job Details</h3>
	</div>
	<div style="margin-left: 34%;">
		<h3>Survey</h3>
	</div>
</div>


	@if (isload)
{	
	
			
	

	<MudGrid>
		<!-- Left Column -->
		<MudItem xs="4">
			<MudStack Spacing="1">
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">

					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:24%"><b>Lead Generator: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.LeadGenerator
									}
								</td>

							</tr>
							<tr>
								<td style="width:10%"><b>Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
											@record.Forename @record.space @record.Surname
									}
								</td>

							</tr>
							<tr>
								<td style="width:10%"><b>Date of Birth: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.DOB
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Address: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.PropertyNo@record.coma @record.AddressLine1@record.coma @record.Town@record.coma @record.Postcode
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Contact No:: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.ContactNo
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Email: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.Email
									}
								</td>
							</tr>

						</table>

					</div>
					



				
				</MudPaper>	
				<h3 class="mt-3 ml-7"><b>EPR</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										<b>EPR Report: </b>
												<MudTextField Style="color:black;" Disabled T="string" Variant="Variant.Text" Text="@record.EprReportText" AutoGrow="true" />
										
									}
								</td>

							</tr>
							<tr>
								<td style="width:10%"><b>Contribution:</b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.EprJobContrbText
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>
				
				
					


					
						<h3 class="mt-3 ml-7"><b>IPAD</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:29%"><b>Retrofit Assessors: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.IpadQAccessorName
									}
								</td>

							</tr>
							<tr>
								<td style="width:29%"><b>Retrofit coordinator: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.IpadQAccessorNameRcInst
									}
								</td>

							</tr>
						</table>
					</div>
				</MudPaper>





					
						<h3 class="mt-3 ml-7"><b>RIR Installation</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:23%"><b>Installer Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.RIRName
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Time: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.RIRTime
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Date: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
											@record.RIRDate?.ToString("dd/MM/yyyy")
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>




				
				<h3 class="mt-3 ml-7"><b>Boiler Installation</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:23%"><b>Installer Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.BoilerName
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Time: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.BoilerTime
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Date: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
											@record.BoilerDate?.ToString("dd/MM/yyyy")
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>
				

				
				<h3 class="mt-3 ml-7"><b>Solar PV Installation</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
										<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:23%"><b>Installer Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.SolarName
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Time: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.SolarTime
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Date: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
											@record.SolarDate?.ToString("dd/MM/yyyy")
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>
				


					

					
	
						<h3 class="mt-3 ml-7"><b>Post Stage Dates:</b></h3>
						<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
							<div style="padding:25px;">
								<table style="width:100%;">

									<tr>
										
										<td style="width:100%">
											@foreach (var record in PostStageDatesRecords)
											{
											var dateValueStartDate = DateTime.Parse(record.StartDate);
											var dateValueEndDate = DateTime.Parse(record.EndDate);


											<b> @record.M </b> @record.Measure     <b> &nbsp; @record.SD </b> @dateValueStartDate.ToString("dd/MM/yyyy") <b> &nbsp; @record.ED </b> @dateValueEndDate.ToString("dd/MM/yyyy")
											<br>
											}
										</td>
									</tr>
								</table>
							</div>
						</MudPaper>

					<h3 class="mt-3 ml-7"><b>Funder Queries</b></h3>
					<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
						<div style="padding:25px;">
							<table style="width:100%;">

								<tr>
									<td style="width:100%">
										@foreach (var record in FunderQueryRecords)
										{
											var FN = "Funder Name: ";
											var FQ = "Funder Query: ";
											<b>@FN</b>  @record.FunderName <b>@FQ</b> @record.FunderText<br>
										}
									</td>
								</tr>
							</table>
						</div>
					</MudPaper>
					<h3 class="mt-3 ml-7"><b>Funder Queries Booking</b></h3>
					<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
						<div style="padding:25px;">
							<table style="width:100%;">

								<tr>
									
									<td style="width:100%">
										@foreach (var record in FunderQueryRecords)
										{
											var Q= "Query: ";
											var MN= "Member Name: ";
											var T= "Time: ";
											var D= "Date: ";
											<b>@Q</b> @record.FunderText <b>@MN</b> @record.Member <b>@T</b> @record.MTime <b>@D</b> @record.MDate<br>
										}
									</td>
								</tr>
							</table>
						</div>
					</MudPaper>


			</MudStack>
		</MudItem>

		<!-- Center Column -->
		<MudItem xs="4">
			
			<MudStack Spacing="1">
				
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE; ">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:24%"><b>Surveyor Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.SurveyName
									}
								</td>

							</tr>
							<tr>
								<td style="width:10%"><b>Survey Date: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.SurveyDate
									}
								</td>

							</tr>
							<tr>
								<td style="width:10%"><b>Survey Time:</b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.SurveyTime
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Tenure: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.Tenure
									}
								</td>
							</tr>
						</table>
					</div>

				</MudPaper>
				<h3 class="mt-3 ml-7"><b>PAS Installation</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:23%"><b>Installer Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.PassInstaName
									}
								</td>

							</tr>
							<tr>
								<td style="width:10%"><b>Time: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.PassInstaTime
									}
								</td>

							</tr>
							<tr>
								<td style="width:10%"><b>Date:</b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.PassInstaDate?.ToString("dd/MM/yyyy")
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>
				<h3 class="mt-3 ml-7"><b>External Wall Insulation </b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:23%"><b>Installer Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.EWIName
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Time: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.EWITime
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Date: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.EWIDate?.ToString("dd/MM/yyyy")
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>
				<h3 class="mt-3 ml-7"><b>IWI Installation</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:23%"><b>Installer Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.IWIName
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Time: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.IWITime
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Date: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.IWIDate?.ToString("dd/MM/yyyy")
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>
				<h3 class="mt-3 ml-7"><b>HC Installation</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:23%"><b>Installer Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.HCName
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Time: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.HCTime
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Date: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.HCDate?.ToString("dd/MM/yyyy")
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>
				<h3 class="mt-3 ml-7"><b>ASHP Installation</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:23%"><b>Installer Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.AshipName
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Time: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.AshipTime
									}
								</td>
							</tr>
							<tr>
								<td style="width:10%"><b>Date: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.AshipDate?.ToString("dd/MM/yyyy")
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>
				<h3 class="mt-3 ml-7"><b>Submission</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>
								<td style="width:23%"><b>Funder Name: </b></td>
								<td style="width:100%">
									@foreach (var record in JobForm1Records)
									{
										@record.FunderName2
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>
				<h3 class="mt-3 ml-7"><b>TM Queries</b></h3>
				<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
					<div style="padding:25px;">
						<table style="width:100%;">

							<tr>

								<td style="width:100%">
									@foreach (var record in TMQueryRecords)
									{
										@record.TextB <br>
									}
								</td>
							</tr>
						</table>
					</div>
				</MudPaper>

			</MudStack>

		</MudItem>



		<!-- Right Column -->
		<MudItem xs="4">
			<MudPaper Elevation="2" Class="rectangle-height ml-7" Style="background:#EEEEEE;">
				<div style="padding:25px;">

					<h3>Job Note</h3>
					<hr />
					<h6>
						@foreach (var record in JobForm1Records)
						{
							@record.JobNote
						}
					</h6>


					<hr style="border:2px white  solid;" />
					<h3>
						Job History
					</h3>
					<ul class="spaced-list">
						@foreach (var record in AuditRecords)
						{
							<li>
								@record.Action By: @record.ActionBy At: @record.ADate.ToString("dd/MM/yyyy hh:mm tt")
							</li>
						}
					</ul>
				</div>
			</MudPaper>
		</MudItem>
	</MudGrid>
	
}
else
{
	<img class="center" style="height:50px;width:50px; display: block; margin-left: auto;   margin-right: auto;" src="loadingdata.gif">
}





















<MudOverlay @bind-Visible="MudOverlayPopup" DarkBackground="true" AutoClose="true">
	<MudPopover TransformOrigin="Origin.CenterCenter" AnchorOrigin="Origin.BottomCenter" Open="@MudOverlayPopup">
		<MudCard Class="ex3" >

			<MudCardHeader>
				<CardHeaderContent>
					<MudText Typo="Typo.h6">Add Job Note</MudText>
					
				</CardHeaderContent>
				<CardHeaderActions>
					<MudIconButton OnClick="CloseOverlayPopup" Icon="@Icons.Material.Filled.Close" Color="Color.Default" />
				</CardHeaderActions>
			</MudCardHeader>

			<MudContainer>


				<MudTextField T="string" Lines="3" Label="Job Note" Variant="Variant.Text" @bind-Value="model.JobNote" />
					
				
			</MudContainer>

			<MudCardActions Style="justify-content:end">
				<MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CloseOverlayPopup">Cancel</MudButton>
				&nbsp;<MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SubmitJobNote">Save</MudButton>
			</MudCardActions>
		</MudCard>

	</MudPopover>
</MudOverlay>
<MudOverlay @bind-Visible="PopUpAssign" DarkBackground="true" AutoClose="false">
	<MudPopover Open="@PopUpAssign" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

		<MudCard>
			<MudCardContent>
				<MudText Typo="Typo.h6">Assign job for inspection</MudText>

				<MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Company" @bind-Value="selectedscompany" Required="true">
					<MudSelectItem T="string" Value="null" Label="Company" />
					@foreach (var comp in CompList)
					{
						<MudSelectItem T="string" Value="comp" Label="@comp" />
					}
				</MudSelect>
				<MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Measure" @bind-Value="selectedsMeasure" Required="true">
					<MudSelectItem T="string" />
					@foreach (var mes in MeasuerList)
					{
						<MudSelectItem T="string" Value="mes" Label="@mes" />
					}
				</MudSelect>
				<MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Incepection" @bind-Value="selectedsInspection" Required="true">
					<MudSelectItem T="string" />
					@foreach (var ins in constant.inspection)
					{
						<MudSelectItem T="string" Value="ins" Label="@ins" />
					}
				</MudSelect>
				<MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Month" @bind-Value="selectedsMonth" Required="true">
					<MudSelectItem T="string" />
					@foreach (var mon in constant.month)
					{
						<MudSelectItem T="string" Value="mon" Label="@mon" />
					}
				</MudSelect>
				
			</MudCardContent>
			<MudCardActions Style="justify-content:end">
				
@* 				<MudButton OnClick="AssignToC2" Color="Color.Success">Assign to C2</MudButton>
				<MudButton OnClick="AssignToC3" Color="Color.Success">Assign to C3</MudButton> *@
				
				<MudButton OnClick="closeConfirmation" Color="Color.Error">Cancel</MudButton>
				<MudButton OnClick="AssignToInspection" Color="Color.Success">Assign</MudButton>
			</MudCardActions>
		</MudCard>

	</MudPopover>
</MudOverlay>

<MudOverlay @bind-Visible="PopUpCanceljob" DarkBackground="true" AutoClose="false">
	<MudPopover Open="@PopUpCanceljob" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

		<MudCard>
			<MudCardContent>
				<MudText Typo="Typo.h6">Confirmation</MudText>
				<MudText Typo="Typo.body2">
					Are you sure you want to perform this action? <b>This process cannot be undone.</b>
				</MudText>
			</MudCardContent>
			<MudCardActions Style="justify-content:end">				
				<MudButton OnClick="closeConfirmationCanceljob" Color="Color.Error">Cancel</MudButton>
				<MudButton OnClick="DeleteBetWeenIn" Color="Color.Success">Ok</MudButton>
			</MudCardActions>
		</MudCard>

	</MudPopover>
</MudOverlay>

<MudOverlay @bind-Visible="PopUpRejectjob" DarkBackground="true" AutoClose="false">
	<MudPopover Open="@PopUpRejectjob" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

		<MudCard>
			<MudCardContent>
				<MudText Typo="Typo.h6">Confirmation</MudText>
				<MudText Typo="Typo.body2">
					Are you sure you want to perform this action? <b>This process cannot be undone.</b>
				</MudText>
			</MudCardContent>
			<MudCardActions Style="justify-content:end">
				<MudButton OnClick="closeConfirmationRejectjob" Color="Color.Error">Cancel</MudButton>
				<MudButton OnClick="DeleteBetWeenIn2" Color="Color.Success">Ok</MudButton>
			</MudCardActions>
		</MudCard>

	</MudPopover>
</MudOverlay>
    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{
	
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
	private List<string> CompList;
	private List<string> MeasuerList;
	private string selectedscompany;
	private string selectedsMeasure;
	private string selectedsInspection;
	private string selectedsMonth;
	bool isloaded = false;

	private async Task GetCompanyList()
	{
		var client = new HttpClient();
		var response = await client.GetAsync(constant.GetCompanyName);
		if (response.IsSuccessStatusCode)
		{
			var content = await response.Content.ReadAsStringAsync();
			CompList = JsonConvert.DeserializeObject<List<string>>(content);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Snackbar.Add(errorMessage, Severity.Error);
		}
	}
	private async Task GetMeasureList()
	{
		var client = new HttpClient();
		var response = await client.GetAsync(constant.GetMeasure);
		if (response.IsSuccessStatusCode)
		{
			var content = await response.Content.ReadAsStringAsync();
			MeasuerList = JsonConvert.DeserializeObject<List<string>>(content);
			StateHasChanged();
		}
		else
		{
			var errorMessage = await response.Content.ReadAsStringAsync();
			Snackbar.Add(errorMessage, Severity.Error);
		}
	}

	private async Task DeleteBetWeenIn2()
	{
		DateTime utcTime = DateTime.UtcNow;
		TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
		londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
		using (var httpClient = new HttpClient())
			try
			{
				var data = new
				{
					formId = constant.FormId

				};
				var json = JsonConvert.SerializeObject(data);
				var content = new StringContent(json, Encoding.UTF8, "application/json");

				var response = await httpClient.PostAsync(constant.AutoIdsDelete, content);
				if (response.IsSuccessStatusCode)
				{
					DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, CurrentId);
					AddRecordClass.AddRecordInFormJob(constant.FormId, 49);
					AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Job Canceled");
					Snackbar.Add("Job Reject Successfully", Severity.Success);

				}
				else
				{
					var x = response.Content.ReadAsStringAsync();
					Snackbar.Add(x.ToString(), Severity.Error);

				}
				PopUpCanceljob = false;
				return;

			}

			catch (Exception e)
			{
				PopUpCanceljob = false;
				Snackbar.Add("Try Catch Error: " + e, Severity.Error);
			}
	}

	private async Task DeleteBetWeenIn()
	{
		DateTime utcTime = DateTime.UtcNow;
		TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
		londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
		using (var httpClient = new HttpClient())
			try
			{
				var data = new
				{
					formId = constant.FormId

				};
				var json = JsonConvert.SerializeObject(data);
				var content = new StringContent(json, Encoding.UTF8, "application/json");

				var response = await httpClient.PostAsync(constant.AutoIdsDelete, content);
				if (response.IsSuccessStatusCode)
				{
					DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, CurrentId);
					AddRecordClass.AddRecordInFormJob(constant.FormId, 48);
					AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Job Canceled");
					Snackbar.Add("Job Canceled Successfully", Severity.Success);	

				}
				else
				{
					var x = response.Content.ReadAsStringAsync();
					Snackbar.Add(x.ToString(), Severity.Error);

				}
				PopUpCanceljob = false;
				return;

			}

			catch (Exception e)
			{
				PopUpCanceljob = false;
				Snackbar.Add("Try Catch Error: " + e, Severity.Error);
			}
	}


	bool PopUpAssign = false;
	private void ShowConfirmation()
	{

		PopUpAssign = true;


	}
	private void closeConfirmation()
	{

		PopUpAssign = false;

	}

	bool PopUpCanceljob = false;
	private void ShowConfirmationCanceljob()
	{

		PopUpCanceljob = true;


	}
	private void closeConfirmationCanceljob()
	{

		PopUpCanceljob = false;

	}
	bool PopUpRejectjob = false;
	private void ShowConfirmationRejectjob()
	{

		PopUpRejectjob = true;


	}
	private void closeConfirmationRejectjob()
	{

		PopUpRejectjob = false;

	}





	DateTime londonTime;
	public async Task AssignToInspection()
	{

		using (var httpClient = new HttpClient())
			try
			{
				var data = new
				{
					FormNo = constant.FormId,
					Company = selectedscompany,
					Measure = selectedsMeasure,
					Inspection = selectedsInspection,
					Month = selectedsMonth,
					Status="In Process"

				};
				if (string.IsNullOrEmpty(selectedscompany))
				{
					Snackbar.Add("Company is required", Severity.Error);
					return;
				}
				if (string.IsNullOrEmpty(selectedsMeasure))
				{
					Snackbar.Add("Measure is required", Severity.Error);
                    return;
				}
				if (string.IsNullOrEmpty(selectedsInspection))
                {
                    Snackbar.Add("Inspection is required", Severity.Error);
                    return;
                }
				if (string.IsNullOrEmpty(selectedsMonth))
                {
                    Snackbar.Add("Month is required", Severity.Error);
                    return;
                }
				DateTime utcTime = DateTime.UtcNow;
				TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
				londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
				var json = JsonConvert.SerializeObject(data);
				var content = new StringContent(json, Encoding.UTF8, "application/json");
				var response = await httpClient.PostAsync(constant.AssignToInspection, content);
				if (response.IsSuccessStatusCode)
                {
					AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Assigned job to inspection");
					AddRecordClass.AddRecordInFormJob(constant.FormId, 46);
					PopUpAssign = false;
                    Snackbar.Add("Assigned job to inspection", Severity.Success);
                }
                else
                {
					PopUpAssign = false;
                    var x = response.Content.ReadAsStringAsync();
                    Snackbar.Add(x.ToString(), Severity.Error);

                }
			}
			catch(Exception ex)
			{
				                Snackbar.Add("Error: Call To Developer", Severity.Error);
			}








		



		
	}

	// public async Task AssignToC3()
	// {
	// 	bool success= await AddRecordClass.AddRecordInFormJob(constant.FormId, 47);
	// 	if(success)
	// 	{
	// 		AuditClasss.Audit(constant.FormId, constant.LoginUserName, date2, "Assign To C3");
	// 		Snackbar.Add("Assigned To C3", Severity.Success);
	// 	}
	// 	else
	// 	{
	// 		Snackbar.Add("Already Assign", Severity.Error);
	// 	}
	// 	PopUpAssign = false;
	// }





	








	bool MudOverlayPopup = false;

	bool isload = false;
	//public string text {get; set;}
	public string jobnote {get; set;}

	public void OpenOverlayPopup()
	{

		MudOverlayPopup = true;
		StateHasChanged();
	}
	public void CloseOverlayPopup()
	{
		MudOverlayPopup = false;
		StateHasChanged();
	}
	private async Task SubmitJobNote()
	{
		var data = new
		{
			Id=constant.FormId,
			jobNote=model.JobNote

		};


		try
		{
			using var httpClient = new HttpClient();
			string jsonData = JsonConvert.SerializeObject(data);
			var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
			var response = await httpClient.PostAsync(constant.UpdateJobNote, content);

			if (response.IsSuccessStatusCode)
			{

				MudOverlayPopup = false;
				StateHasChanged();
				Snackbar.Add("Note Added Successfully.", Severity.Success);

			}
			else
			{

				var errorMessage = await response.Content.ReadAsStringAsync();
				Snackbar.Add(errorMessage, Severity.Error);
			}
		}
		catch (Exception e)
		{
			Snackbar.Add("Error: Call To Developer", Severity.Error);
		}


	}



	JobForm1Record model = new JobForm1Record();
	public class JobForm1Record
	{
		public int Id { get; set; }
		public string RefNo { get; set; }
		public string LeadGenerator { get; set; }
		public string Scheme { get; set; }
		public string Surname { get; set; }
		public string Forename { get; set; }
		public string DOB { get; set; }
		public string PropertyNo { get; set; }
		public string AddressLine1 { get; set; }
		public string Town { get; set; }
		public string Postcode { get; set; }
		public string SurveyName { get; set; }
		public string SurveyDate { get; set; }
		public string SurveyTime { get; set; }
		public string Tenure { get; set; }
		public int Status { get; set; }
		public string CreateBy { get; set; }
		public DateTime? CDate { get; set; }
		public string PassInstaName { get; set; }
		public DateTime? PassInstaDate { get; set; }
		public string PassInstaTime { get; set; }
		public string LoftName { get; set; }
		public DateTime? LoftDate { get; set; }
		public string LoftTime { get; set; }
		public string RIRName { get; set; }
		public DateTime? RIRDate { get; set; }
		public string RIRTime { get; set; }
		public string EWIName { get; set; }
		public DateTime? EWIDate { get; set; }
		public string EWITime { get; set; }
		public string IWIName { get; set; }
		public DateTime? IWIDate { get; set; }
		public string IWITime { get; set; }
		public string BoilerName { get; set; }
		public DateTime? BoilerDate { get; set; }
		public string BoilerTime { get; set; }
		public string HCName { get; set; }
		public DateTime? HCDate { get; set; }
		public string HCTime { get; set; }
		public string SolarName { get; set; }
		public DateTime? SolarDate { get; set; }
		public string SolarTime { get; set; }
		public string AshipName { get; set; }
		public DateTime? AshipDate { get; set; }
		public string AshipTime { get; set; }
		public string FunderName { get; set; }
		public string FunderName2 { get; set; }
		public DateTime? FunderDate { get; set; }
		public string FunderTime { get; set; }
		public string IpadQAccessorName { get; set; }
		public string IpadQAccessorNameRcInst { get; set; }
		public string EprReportText { get; set; }
		public string EprJobContrbText { get; set; }
		public string RcInstructSideNote { get; set; }
		public string RcInstructSideDate { get; set; }
		public string FunderQText { get; set; }
		public string JobNote { get; set; }
		public string Email { get; set; }
		public string ContactNo { get; set; }
		public string coma { get; set; } = ",";
		public string space { get; set; } = " ";

	}

	public class AuditRecord
	{
		public int Id { get; set; }
		public int FormOrId { get; set; }
		public string ActionBy { get; set; }
		public DateTime ADate { get; set; }
		public string Action { get; set; }

	}

	public class FromStatusRecord
	{
		public int Id { get; set; }
		public int FormId { get; set; }
		public int Status { get; set; }


	}
	public class PostStageDatesRecord
	{
		public int Id { get; set; }
		public int FormId { get; set; }
		public int Status { get; set; }
		public string Measure { get; set; }
		public string StartDate { get; set; }
		public string EndDate { get; set; }
		public string M { get; set; }=" Measure: ";
		public string SD { get; set; }=" Start Date: ";
		public string ED { get; set; } = " End Date: ";



	}
	public class FunderQueryRecord
	{
		public int Id { get; set; }
		public int FormNo { get; set; }
		public string FunderName { get; set; }
		public string FunderText { get; set; }
		public string MemberType { get; set; }
		public string Member { get; set; }
		public string MTime { get; set; }
		public string MDate { get; set; }




	}
	public class TMQueryRecord
	{
		public int Id { get; set; }
		public int FormNo { get; set; }
		public string TextB { get; set; }
	}

	public int CurrentId = 0;


	private List<JobForm1Record> JobForm1Records { get; set; }
	private List<AuditRecord> AuditRecords { get; set; }
	private List<FromStatusRecord> FromStatusRecords { get; set; }
	private List<PostStageDatesRecord> PostStageDatesRecords { get; set; }
	private List<FunderQueryRecord> FunderQueryRecords { get; set; }
	private List<TMQueryRecord> TMQueryRecords { get; set; }

	protected override void OnInitialized()
	{


		LoadFormData();
		GetCompanyList();
		GetMeasureList();
		isloaded = true;


	}
	private async Task LoadFormData()
	{
		try
		{
			using (var httpClient = new HttpClient())
			{
				var data = new { Id = constant.FormId };
				string jsonData = JsonConvert.SerializeObject(data);
				var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
				var response = await httpClient.PostAsync(constant.GetJobData, content);

				if (response.IsSuccessStatusCode)
				{
					var responseContent = await response.Content.ReadAsStringAsync();
					var responseObject = JsonConvert.DeserializeObject<dynamic>(responseContent);

					JobForm1Records = JsonConvert.DeserializeObject<List<JobForm1Record>>(responseObject.JobForm1Records.ToString());
					AuditRecords = JsonConvert.DeserializeObject<List<AuditRecord>>(responseObject.AuditRecords.ToString());
					FromStatusRecords = JsonConvert.DeserializeObject<List<FromStatusRecord>>(responseObject.FromStatusRecords.ToString());
					PostStageDatesRecords = JsonConvert.DeserializeObject<List<PostStageDatesRecord>>(responseObject.PostStageDatesRecords.ToString());
					FunderQueryRecords = JsonConvert.DeserializeObject<List<FunderQueryRecord>>(responseObject.FunderQueryRecords.ToString());
					TMQueryRecords = JsonConvert.DeserializeObject<List<TMQueryRecord>>(responseObject.TMQueryRecords.ToString());

					CurrentId = FromStatusRecords.Select(j => j.Status).LastOrDefault();




					
					
					isload = true;
					StateHasChanged();
				}
				else
				{
					var errorMessage = await response.Content.ReadAsStringAsync();
					Snackbar.Add(errorMessage, Severity.Error);
				}
			}
		}
		catch (Exception e)
		{
			Snackbar.Add("Try Catch Error: " + e.Message, Severity.Error);
		}
	}




}