@page "/JobStages"
<PageTitle>Job Stages</PageTitle>
@inject HttpClient Http
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }

    .ex3 {
        height: 500px;
        overflow: auto;
    }

</style>

<div class="card-header mt-2">
    <h5>
        JOB QUERIES
    </h5>
</div>

<AuthorizeView>
    <Authorized>

@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else
{
    <table class="table mt-8 mr-4 ml-4">
        <thead>
            <tr>
                <th class="col">#</th>
                <th class="col">RefNo</th>
                <th class="col">Address</th>
                <th class="col">Action</th>
            </tr>
        </thead>

        @if (formList.Count > 0)
        {
            <tbody>
                @foreach (var result in formList)
                {
                    <tr>
                        <th scope="row">@(formList.IndexOf(result) + 1)</th>
                        <td>@result.RefNo</td>
                        <td>@result.AddressLine1</td>
                        <td>
                             <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>
                            <MudButton Class="ml-1" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.List" Color="Color.Primary" OnClick="@((e) => OpenOverlayCheckList8(result))">Job Queries</MudButton>
                           
                        </td>
                    </tr>
                }
            </tbody>
        }
    </table>
    <MudOverlay @bind-Visible="MudOverlayCheckList8" DarkBackground="true" AutoClose="true">
        <MudPopover TransformOrigin="Origin.CenterCenter" AnchorOrigin="Origin.BottomCenter" Open="@MudOverlayCheckList8">
            <MudCard Class="ex3">

                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Job Query</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton OnClick="CloseOverlayCheckList8" Icon="@Icons.Material.Filled.Close" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>

                <MudContainer>
                    <MudGrid>
                        <MudItem xs="12">
                            @foreach (var item in Checklists)
                            {
                                <MudPaper Class="pa-4 mb-4 d-flex align-items-center justify-content-between">
                                    <MudText Class="mr-2">@item.CheckList</MudText>
                                    <MudSelect T="int" @bind-Value="@item.SelectedValue" Class="ml-auto">
                                        <MudSelectItem Value="1">✅</MudSelectItem>
                                        <MudSelectItem Value="2">NA</MudSelectItem>
                                        <MudSelectItem Value="3">❌</MudSelectItem>
                                    </MudSelect>
                                </MudPaper>
                            }
                        </MudItem>

                    </MudGrid>
                </MudContainer>



                <MudCardActions Style="justify-content:end">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CloseOverlayCheckList8">Cancel</MudButton>
                    &nbsp;<MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SubmitChecklists">Save</MudButton>
                </MudCardActions>
            </MudCard>

        </MudPopover>
    </MudOverlay>
    @if (formList.Count == 0)
    {
        <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
    }
}

    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{
    public void GoToJob(FormResponse result)
    {
        constant.FormId = result.FormId;
        NavigationManager.NavigateTo("/job", true);
    }
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
    bool MudOverlayCheckList8 = false;
    public void OpenOverlayCheckList8(FormResponse result)
    {
        constant.FormId = result.FormId;
        Checklists = result.CheckListRecord;
        MudOverlayCheckList8 = true;
        StateHasChanged();
    }
    public void CloseOverlayCheckList8()
    {
        MudOverlayCheckList8 = false;
        StateHasChanged();
    }
    protected override void OnInitialized()
    {
        Form1BySat11();
    }
    bool loading = true;
    private int? openedFormId;
    public class FormResponse
    {

        public int FormId { get; set; }
        public string AddressLine1 { get; set; }
        public string RefNo { get; set; }
        public List<CheckListRecord> CheckListRecord { get; set; }
    }

    public class CheckListRecord
    {
        public int CheckListId { get; set; }
        public string CheckList { get; set; }
        public int SelectedValue { get; set; }
        public int FormId { get; set; }
    }
    List<CheckListRecord> Checklists = new List<CheckListRecord>();

    List<FormResponse> formList = new List<FormResponse>();

    protected override async Task OnInitializedAsync()
    {
        await Form1BySat11();
    }

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog(DialogOptions options, FormResponse result)
    {

        constant.refno = result.RefNo;
        DialogService.Show<ViewJobDetailsDialog>("Custom Options Dialog", options);
    }

    private async Task Form1BySat11()
    {
        using (var httpClient = new HttpClient())
        {
            try
            {
                var response = await httpClient.GetAsync(constant.GetCheckListStatus);
                if (response.IsSuccessStatusCode)
                {
                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormResponse>>(jsonString).ToList();
                    Checklists = formList.SelectMany(f => f.CheckListRecord).ToList();
                    // formList = JsonSerializer.Deserialize<List<FormResponse>>(jsonString);
                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    loading = false;

                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                    StateHasChanged();
                }
            }
            catch (Exception e)
            {
                Snackbar.Add("Try Catch Error: " + e.Message, Severity.Error);
            }
        }
    }


    private async Task SubmitChecklists()
    {

        var selectedChecklists = Checklists
            .Where(c => c.SelectedValue == 1 || c.SelectedValue == 2 || c.SelectedValue == 3)
            .Select(c => new CheckListRecord { CheckListId = c.CheckListId, SelectedValue = c.SelectedValue, FormId = constant.FormId })
            .ToList();
      //  string jsonData = JsonConvert.SerializeObject(selectedChecklists);

        try
        {
            using var httpClient = new HttpClient();
            string jsonData = JsonConvert.SerializeObject(selectedChecklists);
            var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
            var response = await httpClient.PostAsync(constant.UpdateCheckList, content);

            if (response.IsSuccessStatusCode)
            {

                MudOverlayCheckList8 = false;
                StateHasChanged();
                Snackbar.Add("Check List updated successfully.", Severity.Success);
                NavigationManager.NavigateTo("/JobStages",  true);
            }
            else
            {

                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception e)
        {
            Snackbar.Add("Error: Call To Developer", Severity.Error);
        }



    }
    


}