@page "/ViewMember"
<PageTitle>Loft Installer Report</PageTitle>
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }
</style>


<div class="card-header mt-2">
    <h5>Member List</h5>
</div>

<AuthorizeView>
    <Authorized>

<div class=" ml-4 mt-4 col-xl-5" style="display:flex">
    @if (tbmkloaded)
    {
        <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Select Type" @bind-Value="selectedLdGen">
            <MudSelectItem T="string" Value="null"  />
            @foreach (var Generator in constant.members)
            {
                <MudSelectItem T="string" Value="Generator" Label="@Generator" />
            }
        </MudSelect>
        <div class="mt-1 ml-2">
            <MudButton Disabled="@_processing" OnClick="GetMemberListByType" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Searching...</MudText>
                }
                else
                {
                    <MudText>Search</MudText>
                }
            </MudButton>
        </div>

    }

</div>

@if (formList.Count > 0)
{
    <table class="table mt-8 mr-2 ml-2">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Neme</th>
                <th scope="col">Email</th>
                <th scope="col">Number</th>
                <th scope="col">Address</th>
            
                <th scope="col" >Action</th>
            </tr>
        </thead>


            <tbody>
                @foreach (var result in formList)
                {

                    <tr>
                        <th scope="row">@(formList.IndexOf(result) + 1)</th>
                        <td>@result.Name</td>
                         <td>@result.Email</td>
                         <td>@result.Contact</td>
                    <td>@result.Address</td>
                
                        <td>
                          
                            <MudButton Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>

                        </td>
                    </tr>

                }
            </tbody>
        




    </table>

}
else
{
    <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
}

    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{public void GoToJob(FormModel result){constant.FormId = result.Id;NavigationManager.NavigateTo("/job", true);}
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
    private bool _processing = false;
    bool tbmkloaded = true;
    private string selectedLdGen;
    private List<string> LdGenList;

    private List<FormModel> formList = new List<FormModel>();

    public class FormModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Contact { get; set; }
        public string Email { get; set; }
        public string Address { get; set; }
        public string NINumber { get; set; }
    }

    private async Task GetMemberListByType()
    {
        using (var httpClient = new HttpClient())
            try
            {
                _processing = true;
                if (selectedLdGen == null || selectedLdGen == "")
                {

                    Snackbar.Add("Name is Required !", Severity.Error);
                    _processing = false;
                    return;
                }

                var Data = new
                {

                    Member1 = selectedLdGen


                };
                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");


                var response = await httpClient.PostAsync(constant.GetMemberListByType, content);
                if (response.IsSuccessStatusCode)
                {

                    _processing = false;
                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormModel>>(jsonString).ToList();
       
                    StateHasChanged();
                }
                else
                {
                    _processing = false;
                   
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {
            
                _processing = false;
                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }


}




