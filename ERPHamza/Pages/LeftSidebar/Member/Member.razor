@page "/Member"
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using MudBlazor
<PageTitle>Add Member</PageTitle>


<AuthorizeView>
    <Authorized>



<MudForm @ref="form" class="mt-4 mr-12 ml-12">
    <MudText Typo="Typo.h5">Add Member</MudText>

    <MudSelect Variant="Variant.Outlined" T="string" Label="Member" @bind-Value="selectedMember" Required="true" RequiredError="Member selection is required.">
        @foreach (var member in constant.members)
        {
            <MudSelectItem T="string" Value="@member">@member</MudSelectItem>
        }
    </MudSelect>

    <MudTextField Variant="Variant.Outlined" @bind-Value="model.Name" Label="Name" Required="true" RequiredError="Name is required." />
    <MudTextField Variant="Variant.Outlined" @bind-Value="model.Contact" Label="Contact"  />
    <MudTextField Variant="Variant.Outlined" @bind-Value="model.Email" Label="Email"  />
    <MudTextField Variant="Variant.Outlined" @bind-Value="model.Address" Label="Address"  />
    <MudTextField Variant="Variant.Outlined" @bind-Value="model.NINumber" Label="NI Number"  />

   <div style="height:15px"></div>
    <MudButton Disabled="@_processing" OnClick="SubmitForm" Variant="Variant.Filled" Color="Color.Primary">
        @if (_processing)
        {
            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
            <MudText Class="ms-2">Processing</MudText>
        }
        else
        {
            <MudText>Save</MudText>
        }
    </MudButton>
</MudForm>

    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{
   
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
    private bool _processing = false;
    private MudForm form;
    private User user = new User();
    private string selectedMember;


    private async Task SubmitForm()
    {
        await form.Validate();
        if (form.IsValid)
        {
            SaveMember();
            // Handle form submission
        }
    }
    User model = new User();
    private async Task SaveMember()

    {
        _processing = true;

        using (var httpClient = new HttpClient())
            try
            {

                var Data = new
                {
                    Member1 = selectedMember,
                    Name = model.Name,
                    Contact = model.Contact,
                    Email = model.Email,
                    Address = model.Address,
                    NINumber = model.NINumber


                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.SaveMemeber, content);

                if (response.IsSuccessStatusCode)
                {
                    _processing = false;
                    var message = await response.Content.ReadAsStringAsync();

                    StateHasChanged();
                    form.Reset();

                    
                    model = new User();
                    Snackbar.Add("Successfull", Severity.Success);
                }
                else
                {
                    _processing = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                }
                _processing = false;

            }
            catch (Exception ex)
            {
                // Handle exceptions
           
                Snackbar.Add(ex.Message, Severity.Error);
            }

    }




    public class User
    {   public string Member { get; set; }
        public string Name { get; set; }
        public string Contact { get; set; }
        public string Email { get; set; }
        public string Address { get; set; }
        public string NINumber { get; set; }
    }
}

