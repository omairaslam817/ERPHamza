@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
<style>

    /* Optional: You can add CSS to style the table */
    .mud-dialog-content {
        background: #F3F3F3;
    }

    .card {
        box-shadow: 0 1rem 2rem hsl(0 0% 0% / 20%);
        gap: 5vmin;
        background: hsl(0 0% 100%);
        color: hsl(200 50% 20%);
        line-height: 1.5;
        font-size: 1.5rem;
        font-weight: 300;
        width: 100%;
        height: 35vmin;
        display: flex;
        border-radius: 1ch;
        border: 1px solid hsl(0 0% 83%);
        display: grid;
        grid-auto-flow: column;
    }



    my {
        block-size: 100%;
        inline-size: 100%;
        background: hsl(0 0% 85%);
    }

    .no-text-input input {
        pointer-events: none;
        cursor:no-drop;
    }
</style>
<MudDialog TitleClass="mud-primary">
    <TitleContent>
        <MudText Typo="Typo.h6" style="color: white;">ERP Report</MudText>
    </TitleContent>
    <DialogContent>

        <MudCard >
            <MudCardContent >
               
                
                <div class="row" >
                    
                        &nbsp;
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                   
                    <div class="col-md-12">
                        <MudTextField Immediate="true" @bind-Value="TextValue1" Label="EPR Report" Variant="Variant.Outlined" Lines="5" Style="width:100%;"></MudTextField>
                    </div>
                   
                       
                   
                </div>


                <div class="row" style="margin-top:2px;">

                   

                    <div class="col-12">
                        <MudNumericField Immediate="true" TextChanged="OnTextChanged" Min="0" @bind-Value="TextValue2" Label="Job Contribution" Variant="Variant.Outlined" Lines="2" Style="width:100%;"></MudNumericField>
                    </div>

                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;


                </div>
                <div style="display:flex;">
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                   
                    @if (showOkbtn)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="G2GO" Style="margin-left:5px;">Save </MudButton>
                        
                    }
                    else
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="JobContri" Style="margin-right:5px;">Save</MudButton>
                    }


                </div>
            </MudCardContent>
        </MudCard>

    </DialogContent>
</MudDialog>


@code{public void GoToJob(FormModel result){constant.FormId = result.JobFormRecord.Id;NavigationManager.NavigateTo("/job", true);}
    private void OnTextChanged(string newText)
    {

        if (newText == "0")
        {
            showOkbtn = true;
        }
        else
        {
            showOkbtn = false;
        }

        StateHasChanged();
    }


    bool showOkbtn=false;

    public string TextValue1 { get; set; }
    public int TextValue2 { get; set; } = 0;

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    void Cancel() => MudDialog.Cancel();

    public void JobContri()
    {

        UpdateJobBooked5();
    }
    public void G2GO()
    {

        UpdateJobBooked4();
    }
    private List<FormModel> formList = new List<FormModel>();
    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }

        public string AddressLine1 { get; set; }

        public string SurveyName { get; set; }

        public int Status { get; set; }

    }

    public class FormModel
    {
        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public JobFormRecord JobFormRecord { get; set; }
    }
    private async Task UpdateJobBooked4() // 3 to 4

    {
        if (string.IsNullOrEmpty(TextValue1))
        {
            Snackbar.Add("EPR Text is Required", Severity.Error);
            return;
        }
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
        using (var httpClient = new HttpClient())
            try
            {

                var Data = new
                {
                    Id = constant.FormId,
                    EprReportText=TextValue1,
                    EprJobContrbText=TextValue2

                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.UpdateJobBooked4, content);

                if (response.IsSuccessStatusCode)
                {

                    var message = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(message, Severity.Success);


                    DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 3);
                    AddRecordClass.AddRecordInFormJob(constant.FormId, 4);
                    AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "EPR Done");
                    MudDialog.Close(DialogResult.Ok(true));
                    NavigationManager.NavigateTo("/SurveyDone", forceLoad: true);

                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                }


            }
            catch (Exception ex)
            {
                // Handle exceptions
                Console.WriteLine("An error occurred: " + ex.Message);
                Snackbar.Add(ex.Message, Severity.Error);
            }

    }
    DateTime londonTime;
    private async Task UpdateJobBooked5() // move 3 to 5

    {
        if (string.IsNullOrEmpty(TextValue1))
        {
            Snackbar.Add("EPR Text is Required", Severity.Error);
            return;
        }
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
        using (var httpClient = new HttpClient())
            try
            {

                var Data = new
                {
                    Id = constant.FormId,
                    EprReportText = TextValue1,
                    EprJobContrbText = TextValue2


                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.UpdateJobBooked5, content);

                if (response.IsSuccessStatusCode)
                {
                    
                    var message = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(message, Severity.Success);
                    StateHasChanged();
                    //  DeleteRecordInFormJob(result.JobFormRecord.Id, 3);
                    DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 3);
                    AddRecordClass.AddRecordInFormJob(constant.FormId, 5);
                    AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Job Contribution");
                    
                    MudDialog.Close(DialogResult.Ok(true));
                    NavigationManager.NavigateTo("/SurveyDone",forceLoad:true);
                    
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                }


            }
            catch (Exception ex)
            {
                // Handle exceptions
                Console.WriteLine("An error occurred: " + ex.Message);
                Snackbar.Add(ex.Message, Severity.Error);
            }

    }
   
  
    
    


}