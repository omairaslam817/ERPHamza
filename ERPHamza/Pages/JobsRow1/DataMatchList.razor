@page "/DataMatchList"
@using System.Net.Http.Json
@inject HttpClient Http
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using Newtonsoft.Json
@using ERPHamza.Data.MyClasses
@inject ISnackbar Snackbar

@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }

    .ex3 {
        height: 500px;
        overflow: auto;
    }
</style>

<AuthorizeView>
    <Authorized>

<div class="card-header mt-2" style="display: flex; justify-content: space-between; align-items: center;">
    <h5>Data Match</h5>

    <MudButton Href="/addjobs" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Style="background:#9b2bb2;color:white">
        Add New Job
    </MudButton>
</div>


@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else
{

<table class="table mt-8 mr-2 ml-2">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">RefNo</th>
            <th scope="col">Address</th>
            <th scope="col" style="text-align: center;">Action</th>
        </tr>
    </thead>

    @if (formList.Count > 0)
    {
        <tbody>
            @foreach (var result in formList)
            {

                <tr>
                    <th scope="row">@(formList.IndexOf(result) + 1)</th>
                    <td >@result.JobFormRecord.RefNo</td>
                    <td>@result.JobFormRecord.AddressLine1</td>
                    <td>
                        <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>

                            @if (result.JobFormRecord.ChkL1 ?? false)
                            {
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" @onclick="@(() => MoveToBookSurvey(result))">Book survey</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.List" Color="Color.Primary" OnClick="@((e) => OpenOverlayCheckList1(result))">Check List</MudButton>
                            }
                            
                        
                        
                    </td>
                </tr>

            }
        </tbody>
    }




</table>
    @if (formList.Count == 0)
    {
        <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
    }
}


    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>

<MudOverlay @bind-Visible="MudOverlayCheckList1" DarkBackground="true" AutoClose="true">
    <MudPopover TransformOrigin="Origin.CenterCenter" AnchorOrigin="Origin.BottomCenter" Open="@MudOverlayCheckList1">
        <MudCard Class="ex3">

            <MudCardHeader >
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">PRE-CHECK & ELIGIBILITY CHECKLIST</MudText>
                    <hr>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudIconButton OnClick="CloseOverlayCheckList1" Icon="@Icons.Material.Filled.Close" Color="Color.Default" />
                </CardHeaderActions>
            </MudCardHeader>

            <MudContainer>
                <MudGrid>
                    <MudItem xs="12" sm="6" md="6">
                        @foreach (var item in Checklists.Take(Checklists.Count() / 2))
                        {
                            <MudPaper Class="pa-4 mb-4 d-flex align-items-center justify-content-between">
                                <div style="width:80%">
                                <MudText  Class="mr-2">@item.CheckList</MudText>
                                </div>
                                <div style="width:20%">

                               
                                    <MudSelect Text="Select" @bind-Value="@item.SelectedValue" Class="ml-auto" Placeholder="Select">
                                    <MudSelectItem Value="1">✅</MudSelectItem>
                                    <MudSelectItem Value="2">NA</MudSelectItem>
                                    <MudSelectItem Value="3">❌</MudSelectItem>
                                </MudSelect>
                                </div>
                            </MudPaper>
                        }
                    </MudItem>
                    <MudItem xs="12" sm="6" md="6">
                        @foreach (var item in Checklists.Skip(Checklists.Count() / 2))
                        {
                            <MudPaper Class="pa-4 mb-4 d-flex align-items-center justify-content-between">
                                 <div style="width:80%">
                                <MudText  Class="mr-2">@item.CheckList</MudText>
                                </div>
                                <div style="width:20%">
                                    <MudSelect Text="Select" @bind-Value="@item.SelectedValue" Label="" Class="ml-auto" Placeholder="Select">
                                    <MudSelectItem Value="1">✅</MudSelectItem>
                                    <MudSelectItem Value="2">NA</MudSelectItem>
                                    <MudSelectItem Value="3">❌</MudSelectItem>
                                </MudSelect>
                                </div>
                            </MudPaper>
                        }
                    </MudItem>
                </MudGrid>
            </MudContainer>

            <MudCardActions Style="justify-content:end">
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CloseOverlayCheckList1">Cancel</MudButton>
                &nbsp;<MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SubmitChecklists">Save</MudButton>
            </MudCardActions>
        </MudCard>

    </MudPopover>
</MudOverlay>



@code{


    public void GoToJob(FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        NavigationManager.NavigateTo("/job", true);
    }


    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
    bool MudOverlayCheckList1 = false;
    public void OpenOverlayCheckList1(FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        MudOverlayCheckList1 = true;
        StateHasChanged();
    }
    public void CloseOverlayCheckList1()
    {
        GetCheckList();
        MudOverlayCheckList1 = false;
        StateHasChanged();
    }




    bool loading = true;
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog(DialogOptions options, FormModel result)
    {

        constant.refno = result.JobFormRecord.RefNo;
        constant.FormId = result.FormId;
        DialogService.Show<ViewJobDetailsDialog>("Custom Options Dialog", options);
    }


    public void MoveToBookSurvey(FormModel result)
    {
        constant.refno = result.JobFormRecord.RefNo;
        NavigationManager.NavigateTo("/booksurvey");

    }



    private List<FormModel> formList = new List<FormModel>();

    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }

        public string AddressLine1 { get; set; }

        public string SurveyName { get; set; }

        public int Status { get; set; }

        public Nullable<bool> ChkL1 { get; set; }

    }

    public class FormModel
    {
        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public JobFormRecord JobFormRecord { get; set; }
    }

    protected override void OnInitialized()
    {

        //  //base.OnInitialized();

        Form1BySat1();
        GetCheckList();
    }

    private async Task Form1BySat1()
    {
        using (var httpClient = new HttpClient())
            try
            {
                var response = await httpClient.GetAsync(constant.Form1BySat1);
                if (response.IsSuccessStatusCode)
                {


                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormModel>>(jsonString).ToList();
                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    loading = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {
                loading = false;
                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }

    //checkList
    public class ChecklistItem
    {
        public int Id { get; set; }
        public string CheckList { get; set; }
        public int SelectedValue { get; set; }
    }
    public class SelectedChecklistItem
    {
        public int Id { get; set; }
        public int SelectedValue { get; set; }
        public int FormId { get; set; }
    }


    private List<ChecklistItem> Checklists = new List<ChecklistItem>();

    private async Task GetCheckList()
    {
        Checklists = await Http.GetFromJsonAsync<List<ChecklistItem>>(constant.GetCheckList1);
    }
    private async Task SubmitChecklists()
    {
        var selectedChecklists = Checklists
            .Where(c => c.SelectedValue == 1 || c.SelectedValue == 2 || c.SelectedValue == 3)
            .Select(c => new SelectedChecklistItem { Id = c.Id, SelectedValue = c.SelectedValue, FormId = constant.FormId })
            .ToList();
        // string jsonData = JsonConvert.SerializeObject(selectedChecklists);
        if (selectedChecklists.Count < 15)
        {
            Snackbar.Add("All Check List are Required!", Severity.Error);
            return;
        }
        else { 
        try
        {
            using var httpClient = new HttpClient();
            string jsonData = JsonConvert.SerializeObject(selectedChecklists);
            var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
                var response = await httpClient.PostAsync(constant.AddCheckLists, content);


                var dataToSend = new { Id = constant.FormId, ChkL1 = true };
                if (response.IsSuccessStatusCode)
                {
                    
                    MudOverlayCheckList1 = false;
                    Snackbar.Add("Check List Saved.", Severity.Success);
                     UpdateCHKL.UpdateCHKList(dataToSend);
                    NavigationManager.NavigateTo("/DataMatchList",true);
                    StateHasChanged();
                }
                else
                {

                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception e)
            {
                Snackbar.Add("Error: Call To Developer", Severity.Error);
            }

        }
        }


    }





  
