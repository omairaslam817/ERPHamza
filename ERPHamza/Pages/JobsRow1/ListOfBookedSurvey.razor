@page "/listbookedsurvey"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }

    .ex3 {
       
        height: 500px;
        overflow: auto;
    }

</style>


<AuthorizeView>
    <Authorized>



<div class="card-header mt-2">
    <h5>Awaiting Survey Done</h5>
</div>

@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else{
<table class="table mt-8 mr-2 ml-2">
    <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">RefNo</th>
            <th scope="col">Surveyor Name</th>
            <th scope="col">Address</th>
            <th scope="col">Date</th>
            <th scope="col">Time</th>
            <th scope="col">Action</th>
        </tr>
    </thead>
    
    @if(formList.Count>0)
    {
    <tbody>
        @foreach (var result in formList)
        {
            
                <tr>
                    <th scope="row">@(formList.IndexOf(result) + 1)</th>
                        <td>@result.JobFormRecord.RefNo</td>
                        <td>@result.JobFormRecord.SurveyName</td>
                        <td>@result.JobFormRecord.AddressLine1</td>
                        <td>@result.JobFormRecord.SurveyDate</td>

                        <td>@result.JobFormRecord.SurveyTime</td>
                    <td>

                             <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>
                            @if (result.JobFormRecord.ChkL2 ?? false)
                            {
                                <MudButton Class="mr-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="@((e) => OpenDialog2(result))">Survey Done</MudButton>
                            }
                            else
                            {
                                <MudButton Class="mr-1" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.List" Color="Color.Primary" OnClick="@((e) => OpenOverlayCheckList2(result))">Check List</MudButton>
                            }
                            <MudButton   Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Secondary" @onclick="@((e) => MoveToBookSurvey4Edit(result))">Edit</MudButton>
                    </td>
                </tr>
            
        }
    </tbody>
    }
   

    

</table>


<MudOverlay @bind-Visible="MudOverlayCheckList2" DarkBackground="true" AutoClose="true" >
        <MudPopover  TransformOrigin="Origin.CenterCenter" AnchorOrigin="Origin.BottomCenter" Open="@MudOverlayCheckList2">
        <MudCard Class="ex3">

                <MudCardHeader>
        <CardHeaderContent>
                        <MudText Typo="Typo.h6">SURVEY CHECKLIST</MudText>
        </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton OnClick="CloseOverlayCheckList1" Icon="@Icons.Material.Filled.Close" Color="Color.Default" />
                    </CardHeaderActions>
        </MudCardHeader>

                        <MudContainer>
                            <MudGrid>
                                <MudItem xs="12" sm="6" md="6">
                                    @foreach (var item in Checklists.Take(Checklists.Count() / 2))
                                    {
                                        <MudPaper Class="pa-4 mb-4 d-flex align-items-center justify-content-between">
                                            <div style="width:80%">
                                                <MudText Class="mr-2">@item.CheckList</MudText>
                                            </div>
                                            <div style="width:20%">


                                                <MudSelect Text="Select" @bind-Value="@item.SelectedValue" Class="ml-auto" Placeholder="Select">
                                                    <MudSelectItem Value="1">✅</MudSelectItem>
                                                    <MudSelectItem Value="2">NA</MudSelectItem>
                                                    <MudSelectItem Value="3">❌</MudSelectItem>
                                                </MudSelect>
                                            </div>
                                        </MudPaper>
                                    }
                                </MudItem>
                                <MudItem xs="12" sm="6" md="6">
                                    @foreach (var item in Checklists.Skip(Checklists.Count() / 2))
                                    {
                                        <MudPaper Class="pa-4 mb-4 d-flex align-items-center justify-content-between">
                                            <div style="width:80%">
                                                <MudText Class="mr-2">@item.CheckList</MudText>
                                            </div>
                                            <div style="width:20%">
                                                <MudSelect Text="Select" @bind-Value="@item.SelectedValue" Label="" Class="ml-auto" Placeholder="Select">
                                                    <MudSelectItem Value="1">✅</MudSelectItem>
                                                    <MudSelectItem Value="2">NA</MudSelectItem>
                                                    <MudSelectItem Value="3">❌</MudSelectItem>
                                                </MudSelect>
                                            </div>
                                        </MudPaper>
                                    }
                                </MudItem>
                            </MudGrid>
                        </MudContainer>



                <MudCardActions Style="justify-content:end">
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CloseOverlayCheckList1">Cancel</MudButton>
                    &nbsp;<MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="SubmitChecklists">Save</MudButton>
                </MudCardActions>
            </MudCard>
       
    </MudPopover>
</MudOverlay>




@if (formList.Count == 0)
{
    <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
}
}


    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>


@code{
    public void GoToJob(FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        NavigationManager.NavigateTo("/job", true);
    }
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
    bool loading = true;
    bool MudOverlayCheckList2 = false;
    public void OpenOverlayCheckList2(FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        MudOverlayCheckList2 = true;
        StateHasChanged();
    }
    public void CloseOverlayCheckList1()
    {
        GetCheckList();
        MudOverlayCheckList2 = false;
        StateHasChanged();
    }









    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog(DialogOptions options, FormModel result)
    {
        constant.FormId = result.FormId;
        constant.refno = result.JobFormRecord.RefNo;
        DialogService.Show<ViewJobDetailsDialog>("Custom Options Dialog", options);
    }
    private void OpenDialog2(FormModel result)
    {

        constant.FormId = result.JobFormRecord.Id;
        DialogService.Show<BookSurveyDialog3>("Confirmation");
    }




    public  int ID = 0;
    private void GetIdBooked(FormModel result)
    {

        ID = result.JobFormRecord.Id;
        //StatusChangeTo3();




    }
    private List<FormModel> formList = new List<FormModel>();

    public void MoveToBookSurvey4Edit(FormModel result)
    {
        constant.refno = result.JobFormRecord.RefNo;
        NavigationManager.NavigateTo("/booksurvey");
    }

    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }

        public string AddressLine1 { get; set; }

        public string SurveyName { get; set; }
        public string SurveyDate { get; set; }
        public string SurveyTime { get; set; }
        public Nullable<bool> ChkL2 { get; set; }
        public int Status { get; set; }

    }

    public class FormModel
    {
        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public JobFormRecord JobFormRecord { get; set; }
    }


    protected override void OnInitialized()
    {

        // //base.OnInitialized();

        Form1BySat2();
        GetCheckList();
    }

    private async Task Form1BySat2()
    {
        using (var httpClient = new HttpClient())
            try
            {
                var response = await httpClient.GetAsync(constant.Form1BySat2);
                if (response.IsSuccessStatusCode)
                {

                    loading = false;
                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormModel>>(jsonString).ToList();

                    StateHasChanged();
                }
                else
                {
                    loading = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {
                loading = false;
                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }

    //checkList
    public class ChecklistItem
    {
        public int Id { get; set; }
        public string CheckList { get; set; }
        public int SelectedValue { get; set; }
    }
    public class SelectedChecklistItem
    {
        public int Id { get; set; }
        public int SelectedValue { get; set; }
        public int FormId { get; set; }
    }
    private List<ChecklistItem> Checklists = new List<ChecklistItem>();

    private async Task GetCheckList()
    {
        Checklists = await Http.GetFromJsonAsync<List<ChecklistItem>>(constant.GetCheckList2);
    }
    private async Task SubmitChecklists()
    {

        var selectedChecklists = Checklists
            .Where(c => c.SelectedValue == 1 || c.SelectedValue == 2 || c.SelectedValue == 3)
            .Select(c => new SelectedChecklistItem { Id = c.Id, SelectedValue = c.SelectedValue, FormId = constant.FormId })
            .ToList();
        // string jsonData = JsonConvert.SerializeObject(selectedChecklists);
        if (selectedChecklists.Count < 32)
        {
            Snackbar.Add("All Check List are Required!", Severity.Error);
            return;
        }
        else
        {
            try
            {
                using var httpClient = new HttpClient();
                string jsonData = JsonConvert.SerializeObject(selectedChecklists);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
                var response = await httpClient.PostAsync(constant.AddCheckLists, content);

                var dataToSend = new { Id = constant.FormId, ChkL2 = true };
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("Check List Saved.", Severity.Success);
                    UpdateCHKL.UpdateCHKList(dataToSend);
                    NavigationManager.NavigateTo("/listbookedsurvey", true);
                    

                }
                else
                {

                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception e)
            {
                Snackbar.Add("Error: Call To Developer", Severity.Error);
            }

        }
    }





}