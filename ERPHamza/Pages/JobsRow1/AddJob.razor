@page "/addjobs"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar

@inject NavigationManager NavigationManager
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }
</style>

<AuthorizeView>
    <Authorized>






<center class="mt-5"><h2>Add New Job Record</h2></center>
<div  class="mt-2 mr-6 ml-6">

   


    
        <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">

            <div class="row" style="display:flex">
                <div class="col">
                @if (tbmkloaded)
                {
                    <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Lead Generator" @bind-Value="selectedLdGen" Required="true">
                        <MudSelectItem T="string" Value="null" Label="Lead Generator" />
                        @foreach (var Generator in LdGenList)
                        {
                            <MudSelectItem T="string" Value="Generator" Label="@Generator" />
                        }
                    </MudSelect>
                }
                </div>
                <div class="col">
                <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Scheme" @bind-Value="selectedsScheme" Required="true">
                    <MudSelectItem T="string" Value="null" Label="Scheme" />
                    @foreach (var sch in constant.scheme)
                    {
                        <MudSelectItem T="string" Value="sch" Label="@sch" />
                    }
                </MudSelect>
                </div>
                <div class="col">
                <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Title" @bind-Value="selectedsTitle" Required="true">
                    <MudSelectItem T="string"  />
                    @foreach (var til in constant.title)
                    {
                        <MudSelectItem T="string" Value="til" Label="@til" />
                    }
                </MudSelect>
                </div>
                <div class="col">
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.Surname" Label="Surname" Required="true" RequiredError="Surname is required!" />
                </div>
            <div class="col">
                <MudTextField Margin="Margin.Dense" Variant="Variant.Outlined" @bind-Value="model.Forename" Label="Forename" Required="true" RequiredError="Forename is required!" />
            </div>
            </div>
           





  


        <div style="display:flex;" class="mt-3">
            <div style="width:30%; margin-right: 10px;">
                <MudTextField Margin="Margin.Dense" Label="Date of birth" @bind-Value="model.DOB" Variant="Variant.Outlined" Required="true" RequiredError="DOB is required!" />
            </div>
            <div style="width:70%;">
                    <MudTextField Margin="Margin.Dense" @bind-Value="model.PropertyNo" Variant="Variant.Outlined" Label="Property Name or Number" Required="true" RequiredError="Property Name or Number is required!" />
            </div>
        </div>



        <div class="mt-3">
                <MudTextField Margin="Margin.Dense" @bind-Value="model.AddressLine1" Variant="Variant.Outlined" Label="Address Line 1" Required="true" RequiredError="Address Line 1  is required!" />
        </div>
         <div style="display:flex;" class="mt-3">
            <div class="mr-3">
                <MudTextField  Margin="Margin.Dense" @bind-Value="model.Town" Variant="Variant.Outlined" Label="Town" />
            </div>
            <div style="width:20%;" class="mr-3">
                  @*   <MudTextField Margin="Margin.Dense" @bind-Value="model.Postcode" Required="true" Variant="Variant.Outlined"  RequiredError="Post Code is required!" /> *@
                <MudTextField Required="true" Margin="Margin.Dense" Label="Post Code" Variant="Variant.Outlined"T="string"
                              Value="model.Postcode"
                              ValueChanged="(value) => model.Postcode = value.ToUpper()"
                              Immediate="true"
                              For="@(() => model.Postcode)" />
            </div>
            <div class="mr-3" style="width:20%;">
                <MudTextField Margin="Margin.Dense" @bind-Value="model.ContactNo" Variant="Variant.Outlined" Label="Contact No" />
            </div>
            <div class="mr-3" style="width:20%;">
                <MudTextField Margin="Margin.Dense" @bind-Value="model.Email"  Variant="Variant.Outlined" Label="Email" />
            </div>
        </div>
      
        </MudForm>
   




</div>



<center class="mt-2">
        <MudButton @onclick="goback" Variant="Variant.Filled" Color="Color.Error">Cancel</MudButton>
<MudButton Disabled="@_processing" @onclick="AddData" Variant="Variant.Filled" Color="Color.Success" Style="width:10%;">
    @if (_processing)
    {
        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" /> <MudText Class="ms-2">Processing</MudText>
    }
    else
    {
        <MudText>Save </MudText>
    }
</MudButton>

</center>

    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{


    private string selectedsScheme;

    private string selectedsTitle;



    public void Navi()
    {
       NavigationManager.NavigateTo("/", forceLoad: true);
    }


    protected override void OnInitialized()
    {


        GetMemberList();


    }



    bool tbmkloaded = false;
    private string selectedLdGen;
    private List<string> LdGenList;

    JobForm1 model = new JobForm1();
    public class JobForm1
    {
        public int Id { get; set; }
        public string LeadGenerator { get; set; }
        public string Surname { get; set; }
        public string Forename { get; set; }
        public string DOB { get; set; }
        public string PropertyNo { get; set; }
        public string AddressLine1 { get; set; }
        public string Scheme { get; set; }


        public string Town { get; set; }
        public string Email { get; set; }
        public string ContactNo { get; set; }

        public string Postcode { get; set; }
        public string RefNo { get; set; }
        public string SurveyName { get; set; }
        public string SurveyDate { get; set; }
        public string SurveyTime { get; set; }
        public int Status { get; set; }

    }














    private bool _processing = false;
    private bool success = false;
    string[] errors = { };
    MudTextField<string> pwField1;
    private MudForm form;



    public string uniq = "";
    DateTime cdate = DateTime.Now;
    private async Task AddData()
    {




        form.Validate();

        if (form.IsValid)
        {
            _processing = true;
            var data = new
            {

                LeadGenerator = selectedLdGen,
                RefNo = model.PropertyNo + model.Postcode,
                Scheme = selectedsScheme,
                Surname = model.Surname,
                Forename = selectedsTitle + " " + model.Forename,
                DOB = model.DOB,
                PropertyNo = model.PropertyNo,
                AddressLine1 = model.AddressLine1,
                Town = model.Town,
                Email=model.Email,
                ContactNo=model.ContactNo,
               
                Postcode = model.Postcode.ToUpper(),
                CreateBy=constant.LoginUserName,
                Cdate = cdate,
                Status = 1
            };
            try
            {
                using var httpClient = new HttpClient();
                string jsonData = JsonConvert.SerializeObject(data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");
                var response = await httpClient.PostAsync(constant.Addform1, content);

                if (response.IsSuccessStatusCode)
                {
                    //AddRecordClass.AddRecordInFormJob(constant.FormId, 6);
                    success = true;
                    _processing = false;
                    Snackbar.Add("Data Saved", Severity.Success);
                    NavigationManager.NavigateTo("/addjobs", forceLoad: true);
                }
                else
                {
                    // Handle error response
                    success = false;
                    _processing = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception e)
            {
                Snackbar.Add("Error: Call To Developer", Severity.Error);
            }

        }



    }

    private async Task GetMemberList()
    {
        var client = new HttpClient();
        var response = await client.GetAsync(constant.GetLDGen);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            LdGenList = JsonConvert.DeserializeObject<List<string>>(content);
            
            tbmkloaded = true;
            StateHasChanged();
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Snackbar.Add(errorMessage, Severity.Error);
        }
    }





    public  void goback()
    {
        NavigationManager.NavigateTo("/index", forceLoad: true);
    
    }

}