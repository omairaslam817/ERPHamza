@page "/SurveyDone"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



</style>

<AuthorizeView>
    <Authorized>

<div class="card-header mt-2">
    <h5>Survey Done</h5>
</div>

@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else{
<table class="table mt-8 mr-4 ml-4">
    <thead>
        <tr>
            <th class="col-1">#</th>
            <th class="col-3">RefNo</th>
            <th class="col-3">Address</th>
                <th class="col-5" style="text-align: center;">Action</th>
        </tr>
    </thead>

    @if (formList.Count > 0)
    {
        <tbody>
            @foreach (var result in formList)
            {

                <tr>
                    <th scope="row">@(formList.IndexOf(result) + 1)</th>
                        <td>@result.JobFormRecord.RefNo</td>
                        <td>@result.JobFormRecord.AddressLine1</td>
                    <td>
                         <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="@((e) => OpenDialog2(maxWidth,result))">ERP Report</MudButton>
                            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" OnClick="@((e) => JobStatus(result))">Job Status</MudButton>
                            
                    </td>
                </tr>

            }
        </tbody>
    }




</table>
    @if (formList.Count == 0)
    {
        <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
    }

}

    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{
    public void GoToJob(FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        NavigationManager.NavigateTo("/job", true);
    }
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }
    private void JobStatus(FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        StateHasChanged();
        NavigationManager.NavigateTo("/job");
    }

    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };
    private void OpenDialog2(DialogOptions options, FormModel result)
    {

        constant.FormId = result.JobFormRecord.Id;
        DialogService.Show<SurveyDoneDialog>("Confirmation");
    }
    bool loading = true;

    public int ID = 0;
    public string refno = "";

    private List<FormModel> formList = new List<FormModel>();
    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }

        public string AddressLine1 { get; set; }

        public string SurveyName { get; set; }

        public int Status { get; set; }

    }

    public class FormModel
    {
        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public JobFormRecord JobFormRecord { get; set; }
    }




    protected override void OnInitialized()
    {

      //  //base.OnInitialized();

        Form1BySat3();
    }

    private async Task Form1BySat3()
    {
        using (var httpClient = new HttpClient())
            try
            {
                var response = await httpClient.GetAsync(constant.Form1BySat3);
                if (response.IsSuccessStatusCode)
                {


                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormModel>>(jsonString).ToList();
                    loading=false;
                    StateHasChanged();
                }
                else
                {
                    loading = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {

                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }

    int fId = 0;
    private async Task UpdateJobBooked4(FormModel result) // 3 to 4

    {
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);

        using (var httpClient = new HttpClient())
            try
            {

                var Data = new
                {
                    Id = result.JobFormRecord.Id


                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.UpdateJobBooked4, content);

                if (response.IsSuccessStatusCode)
                {

                    var message = await response.Content.ReadAsStringAsync();
                    StateHasChanged();

                    DeleteRecordClass.DeleteRecordInFormJob(result.JobFormRecord.Id, 3);
                    AddRecordClass.AddRecordInFormJob(result.JobFormRecord.Id, 4);
                    AuditClasss.Audit(result.JobFormRecord.Id, constant.LoginUserName, londonTime, "EPR Done");

                    NavigationManager.NavigateTo("/SurveyDone", forceLoad: true);
                    Snackbar.Add(message, Severity.Success);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                }


            }
            catch (Exception ex)
            {
                // Handle exceptions
                Console.WriteLine("An error occurred: " + ex.Message);
                Snackbar.Add(ex.Message, Severity.Error);
            }

    }
    DateTime londonTime;
    private async Task UpdateJobBooked5(FormModel result) // move 3 to 5

    {
        fId = result.JobFormRecord.Id;
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
        using (var httpClient = new HttpClient())
            try
            {

                var Data = new
                {
                    Id = result.JobFormRecord.Id


                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.UpdateJobBooked5, content);

                if (response.IsSuccessStatusCode)
                {

                    var message = await response.Content.ReadAsStringAsync();
                    StateHasChanged();
                    //  DeleteRecordInFormJob(result.JobFormRecord.Id, 3);
                    DeleteRecordClass.DeleteRecordInFormJob(result.JobFormRecord.Id, 3);
                    AddRecordClass.AddRecordInFormJob(result.JobFormRecord.Id,5);
                    AuditClasss.Audit(result.JobFormRecord.Id, constant.LoginUserName, londonTime, "Job Contribution");
                    var obj = formList.FirstOrDefault(x => x.FormId == result.JobFormRecord.Id);
                    formList.Remove(obj);
                    //NavigationManager.NavigateTo("/SurveyDone",forceLoad:true);
                    Snackbar.Add(message, Severity.Success);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                }


            }
            catch (Exception ex)
            {
                // Handle exceptions
                Console.WriteLine("An error occurred: " + ex.Message);
                Snackbar.Add(ex.Message, Severity.Error);
            }

    }

    //DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog(DialogOptions options, FormModel result)
    {
        constant.FormId = result.FormId;
        constant.refno = result.JobFormRecord.RefNo;
        // LoadForm1Data();
        DialogService.Show<ViewJobDetailsDialog>("Custom Options Dialog", options);
    }
    







}
