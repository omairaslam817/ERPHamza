@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>

    /* Optional: You can add CSS to style the table */
    .mud-dialog-content {
        background: #F3F3F3;
    }

    .card {
        box-shadow: 0 1rem 2rem hsl(0 0% 0% / 20%);
        gap: 5vmin;
        background: hsl(0 0% 100%);
        color: hsl(200 50% 20%);
        line-height: 1.5;
        font-size: 1.5rem;
        font-weight: 300;
        width: 100%;
        height: 35vmin;
        display: flex;
        border-radius: 1ch;
        border: 1px solid hsl(0 0% 83%);
        display: grid;
        grid-auto-flow: column;
    }



    my {
        block-size: 100%;
        inline-size: 100%;
        background: hsl(0 0% 85%);
    }

</style>
<MudDialog TitleClass="mud-primary">
    <TitleContent>
        <MudText Typo="Typo.h6" style="color: white;">Funder Queries</MudText>
    </TitleContent>
    <DialogContent>

        <MudCard>

            <MudCardContent>
                <div class="row">
                    <div class="col">
                        <MudSelect Variant="Variant.Outlined" @bind-Value="selectedLdGen" Margin="Margin.Dense" Label="Member Type" TextChanged="@(() => HandleSelectionChange())">
                            <MudSelectItem T="string" Value="null" />
                            @foreach (var Generator in constant.members)
                            {
                                <MudSelectItem T="string" Value="Generator" Label="@Generator" />
                            }
                        </MudSelect>
                    </div>
                    <div class="col">
                         @if (isloaded)
                        {
                            <MudSelect Disabled="isenable" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Member" @bind-Value="selectedName">



                                <MudSelectItem T="string" Value="null" Label="Select" />
                                @foreach (var make in NameList)
                                {
                                    <MudSelectItem Value="make" Label="@make" />
                                }
                            </MudSelect>
                        }
                      
                       
                    </div>
                </div>
                <div class="row">
                    <div class="col">
                        <MudTextField @bind-Value="TimeValue" Label="Time" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    </div>
                    <div class="col">
                        <MudTextField @bind-Value="DateValue" Label="Date" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    </div>
                </div>
                <center>
                    <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Success">Book</MudButton>
                </center>
            </MudCardContent>
          
        </MudCard>
    </DialogContent>
    @*     <DialogActions>
    <MudButton OnClick="Cancel">Cancel</MudButton>
    <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions> *@
</MudDialog>

@code{

    private bool isenable = false;
    private bool isloaded = false;

    private string TimeValue;
    private string DateValue;

    private string selectedName;
    private List<string> NameList;



    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();

    public string xy = "xz"; // Default value for x
    private string selectedLdGen;
    private void HandleSelectionChange()
    {
        GetMemberNamesByType();
        xy = selectedLdGen;
        if (string.IsNullOrEmpty(selectedLdGen))
        {
           
            isenable = true;
           
        }
        else
        {
            
            isenable = false;
        }
     
        StateHasChanged();
    }

    private async Task GetMemberNamesByType()

    {

        using (var httpClient = new HttpClient())
            try
            {
                if (selectedLdGen == null || selectedLdGen == "")
                {
                    Snackbar.Add("Member Type is required!", Severity.Error);
                    return;

                }
                var Data = new
                {
                    Member1 = selectedLdGen
                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.GetMemberNamesByType, content);

                if (response.IsSuccessStatusCode)
                {
                    isloaded = true;
                    var content2 = await response.Content.ReadAsStringAsync();
                    NameList = JsonConvert.DeserializeObject<List<string>>(content2);
                 
                    StateHasChanged();

                }
                else
                {
                    
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                }


            }
            catch (Exception ex)
            {

               
                Snackbar.Add(ex.Message, Severity.Error);
            }

    }



}
