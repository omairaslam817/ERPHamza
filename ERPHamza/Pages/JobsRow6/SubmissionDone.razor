@page "/SubmissionDone"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using ERPHamza.Pages.JobsRow3
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<title>Submission Done</title>
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }

</style>


<div class="card-header mt-2">
    <h5>Submission Done</h5>
</div>
<AuthorizeView>
    <Authorized>
@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else
{
    <table class="table mt-12 mr-4 ml-4">
        <thead>
            <tr>
                <th class="col-1">#</th>
                <th class="col-3">RefNo</th>
                <th class="col-3">Address</th>
                <th class="col-5" style="text-align: center;">Action</th>
            </tr>
        </thead>

        @if (formList.Count > 0)
        {
            <tbody>
                @foreach (var result in formList)
                {

                    <tr>
                        <th scope="row">@(formList.IndexOf(result) + 1)</th>
                        <td>@result.JobFormRecord.RefNo</td>
                        <td>@result.JobFormRecord.AddressLine1</td>
                        <td>
                             <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="@((e) => OpenDialog3(maxWidth,result))">Funder Query</MudButton>
                            @if (result.JobFormRecord.isLogemnt ?? false)
                            {
                                <MudButton Variant="Variant.Filled" OnClick="@((e) => ShowConfirmationLogemtRecive(result))" Color="Color.Success">Lodgement recive</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Outlined" OnClick="@((e) => ShowConfirmationLogReq(result))" Color="Color.Success">Lodgement Request</MudButton>

                            }
                           
                           

                        </td>
                    </tr>

                }
            </tbody>
        }





    </table>
 













    @if (formList.Count == 0)
    {
        <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
    }


    <MudOverlay @bind-Visible="PopUpConfirmLogemtRecive" DarkBackground="true" AutoClose="false">
        <MudPopover Open="@PopUpConfirmLogemtRecive" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Confirmation</MudText>
                    <MudText Typo="Typo.body2">
                        Are you sure you want to perform this action? <b>This process cannot be undone.</b>
                    </MudText>
                </MudCardContent>
                <MudCardActions Style="justify-content:end">
                    <MudButton OnClick="closeConfirmationLogemtRecive" Color="Color.Error">Cancel</MudButton>
                    <MudButton OnClick="UpdateJobtoLogmtDone" Color="Color.Success">Ok</MudButton>
                </MudCardActions>
            </MudCard>

        </MudPopover>
    </MudOverlay>


    <MudOverlay @bind-Visible="PopUpConfirmLogReq" DarkBackground="true" AutoClose="false">
        <MudPopover Open="@PopUpConfirmLogReq" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Confirmation</MudText>
                    <MudText Typo="Typo.body2">
                        Are you sure you want to perform this action? <b>This process cannot be undone.</b>
                    </MudText>
                </MudCardContent>
                <MudCardActions Style="justify-content:end">
                    <MudButton OnClick="closeConfirmationLogReq" Color="Color.Error">Cancel</MudButton>
                    <MudButton OnClick="updateStatus" Color="Color.Success">Ok</MudButton>
                </MudCardActions>
            </MudCard>
        </MudPopover>
    </MudOverlay>




}

    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>
@code{public void GoToJob(FormModel result){constant.FormId = result.JobFormRecord.Id;NavigationManager.NavigateTo("/job", true);}
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }



    private async Task UpdateJobtoLogmtDone()
    {
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
        try
        {
            DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 22);
            AddRecordClass.AddRecordInFormJob(constant.FormId, 21);
            AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Lodgement Done");
            var obj = formList.FirstOrDefault(x => x.FormId == constant.FormId);
            formList.Remove(obj);
            PopUpConfirmLogemtRecive = false;
        }
        catch(Exception e)
        {
            Snackbar.Add("Try Catch Error: " + e, Severity.Error);
        }
    }


    private bool PopUpConfirmLogemtRecive = false;
    private void ShowConfirmationLogemtRecive(FormModel result)
    {

        constant.FormId = result.JobFormRecord.Id;
        PopUpConfirmLogemtRecive = true;


    }
    private void closeConfirmationLogemtRecive()
    {
        constant.FormId = 0;
        PopUpConfirmLogemtRecive = false;

    }

  
    private bool PopUpConfirmLogReq = false;
    private void ShowConfirmationLogReq(FormModel result)
    {

        constant.FormId = result.JobFormRecord.Id;
        PopUpConfirmLogReq = true;


    }
    private void closeConfirmationLogReq()
    {
        constant.FormId = 0;
        PopUpConfirmLogReq = false;

    }
 









    private void OpenDialog3(DialogOptions options, FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        DialogService.Show<SubmissionDoneDialog3>("Custom Options Dialog", options);
    }

   
    public void updateStatus()
    {

        UpdateCHKL.UpdateCHKList(new { Id = constant.FormId, isLogemnt = true });
        NavigationManager.NavigateTo("/SubmissionDone", forceLoad: true);
    }

    



    bool loading = true;

    public int ID = 0;
    public string refno = "";

    private List<FormModel> formList = new List<FormModel>();
    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }

        public string AddressLine1 { get; set; }

        public string SurveyName { get; set; }

        public int Status { get; set; }
        public Nullable<bool> isLogemnt { get; set; }
    }
    public class FormModel
    {
        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public JobFormRecord JobFormRecord { get; set; }
    }




    protected override void OnInitialized()
    {

        //base.OnInitialized();

        Form1BySat22();
    }

    private async Task Form1BySat22()
    {
        using (var httpClient = new HttpClient())
            try
            {
                var response = await httpClient.GetAsync(constant.Form1BySat22);
                if (response.IsSuccessStatusCode)
                {


                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormModel>>(jsonString).ToList();
                    loading = false;
                    StateHasChanged();
                }
                else
                {
                    loading = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {

                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }
    DateTime londonTime;




 
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog(DialogOptions options, FormModel result)
    {

        constant.refno = result.JobFormRecord.RefNo;
        // LoadForm1Data();
        DialogService.Show<ViewJobDetailsDialog>("Custom Options Dialog", options);
    }







}





