<title>Funder Queries</title>
@page "/FunderQueries"
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using ERPHamza.Pages.JobsRow3
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
<style>
    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }



    .mud-appbar .mud-toolbar-appbar {
        background-color: #FFFFFF;
    }
    /* Optional: You can add CSS to style the table */
    .mud-dialog-content {
        background: #F3F3F3;
    }

    .card {
        box-shadow: 0 1rem 2rem hsl(0 0% 0% / 20%);
        gap: 5vmin;
        background: hsl(0 0% 100%);
        color: hsl(200 50% 20%);
        line-height: 1.5;
        font-size: 1.5rem;
        font-weight: 300;
        width: 100%;
        height: 35vmin;
        display: flex;
        border-radius: 1ch;
        border: 1px solid hsl(0 0% 83%);
        display: grid;
        grid-auto-flow: column;
    }



    my {
        block-size: 100%;
        inline-size: 100%;
        background: hsl(0 0% 85%);
    }
</style>





<div class="card-header mt-2">
    <h5>Funder Queries</h5>
</div>
<AuthorizeView>
    <Authorized>

@if (loading)
{
    <center style="margin-top:5%;">
        <img src="macGif.gif" alt="Loading" width="30" height="30">
    </center>

}
else
{
    <table class="table mt-8 mr-4 ml-4">
        <thead>
            <tr>
                <th class="col-1">#</th>
                <th class="col-3">RefNo</th>
                <th class="col-3">Address</th>
                <th class="col-5" style="text-align: center;">Action</th>
            </tr>
        </thead>

        @if (formList.Count > 0)
        {
            <tbody>
                @foreach (var result in formList)
                {

                            <tr @onmousedown="@(e => SelectRow(result))">
                        <th scope="row">@(formList.IndexOf(result) + 1)</th>
                        <td>@result.JobFormRecord.RefNo</td>
                                <td>@result.JobFormRecord.PropertyNo @coma @result.JobFormRecord.AddressLine1 @coma @result.JobFormRecord.Town @coma @result.JobFormRecord.Postcode</td>
                        <td>
                             <MudButton OnClick="@((e) => GoToJob(result))" Variant="Variant.Outlined" Color="Color.Success" style="margin-right:50px">Job Details</MudButton>
                            @* <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="@((e) => OpenDialog2(maxWidth,result))">Query Done</MudButton>*@
                            <MudButton Variant="Variant.Outlined" class="mr-5" Color="Color.Success" OnClick="@((e) => OpenOverlay(result))">Queries Queue</MudButton>
                            @* <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="@((e) => ShowConfirmation(result))">Job Closed</MudButton> *@
                            @if (result.JobFormRecord.isLogemnt ?? false)
                            {
                                <MudButton Variant="Variant.Filled" OnClick="@((e) => ShowConfirmationLogemtRecive(result))" Color="Color.Success">Lodgement recive</MudButton>
                            }
                            else
                            {
                                <MudButton Variant="Variant.Outlined" OnClick="@((e) => ShowConfirmationLogReq(result))" Color="Color.Success">Lodgement Request</MudButton>

                            }
                          

                        </td>
                    </tr>

                }
            </tbody>
        }




    </table>
    @if (formList.Count == 0)
    {
        <img class="center" style="height:300px;width:300px; display: block; margin-left: auto;   margin-right: auto;" src="nodata.gif">
    }
}
    </Authorized>
    <NotAuthorized>
        <MudAlert ShowCloseIcon="true" CloseIconClicked="Navi" Severity="Severity.Error" Variant="Variant.Filled">
            <MudAlertTitle>Access Denied</MudAlertTitle>
            <MudAlertDescription>You are not authorized to access this page. Please Login</MudAlertDescription>
        </MudAlert>
        </NotAuthorized>
</AuthorizeView>

@* /popover 1 start/ *@
<MudOverlay @bind-Visible="MudOverlay1" DarkBackground="true" ZIndex="9999" AutoClose="false">
    @if (LoadList)
    {
        <MudCard>
            <MudCardContent>
                <MudTable id="xyz" Items="queries" Style="width: 805px;">
                    <HeaderContent>
                        <MudTh>Select</MudTh>
                        <MudTh>Query</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            <MudCheckBox Color="Color.Tertiary" @bind-Checked="@context.IsSelected" />
                        </MudTd>
                        <MudTd>@context.FunderText</MudTd>
                        <MudTd>@context.Status</MudTd>
                    </RowTemplate>
                </MudTable>
                @if (queries == null || !queries.Any())
                {
                    <style>
                        #xyz {
                            display: none;
                        }
                    </style>
                    <p class="mt-2"><b>No Queries Found</b></p>
                }
            </MudCardContent>
            <center>
                <div style="display: flex; justify-content: center; gap: 10px;">
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(e => ToggleOverlay(false))" Class="mb-2">OK</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@((e) => OpenDialog3(maxWidth, selectedResult))" Class="mb-2">Add</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(e => ToggleOverlay(false))" Class="mb-2">Cancel</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OpenOverlay2" Class="mb-2">Book</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="OnDoneSubmit" Class="mb-2">Done</MudButton>
                </div>
            </center>
        </MudCard>
    }
    else
    {
        <MudProgressCircular>Loading...</MudProgressCircular>
    }
</MudOverlay>
@* /popover 1 end / *@

@* /popover 2 start / *@
<MudOverlay @bind-Visible="MudOverlay2" DarkBackground="true"   AutoClose="false">
<MudCard>
        <MudCardHeader><b>Book Funder Query</b></MudCardHeader>
    <MudCardContent>
        <div class="row">
            <div class="col">
                <MudSelect Variant="Variant.Outlined" @bind-Value="selectedLdGen" Margin="Margin.Dense" Label="Member Type" TextChanged="@(() => HandleSelectionChange())">
                    <MudSelectItem T="string" Value="null" />
                    @foreach (var Generator in constant.members)
                    {
                        <MudSelectItem T="string" Value="Generator" Label="@Generator" />
                    }
                </MudSelect>
            </div>
            <div class="col">
                @if (isloaded)
                {
                    <MudSelect Disabled="isenable" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Member" @bind-Value="selectedName">



                        <MudSelectItem T="string" Value="null" Label="Select" />
                        @foreach (var make in NameList)
                        {
                            <MudSelectItem Value="make" Label="@make" />
                        }
                    </MudSelect>
                }


            </div>
        </div>
            <div class="row">
                <div class="col">
                    <MudTextField @bind-Value="DateValue" Label="Date" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.DateRange"></MudTextField>
                </div>
                <div class="col">
                    <MudTextField @bind-Value="TimeValue" Label="Time" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AccessTime"></MudTextField>
                </div>
            </div>
        <center>
                <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Error" OnClick="@(e => ClosePopip2(false))">Cancel</MudButton>
            <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Success" OnClick="OnSubmit">Book</MudButton>
        </center>
    </MudCardContent>

</MudCard>
</MudOverlay>
@* /popover 2 end / *@

<MudOverlay  @bind-Visible="PopUpConfirm" DarkBackground="true"  AutoClose="false">
    <MudPopover Open="@PopUpConfirm" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">Confirmation</MudText>
                <MudText Typo="Typo.body2">
                    Are you sure you want to perform this action? <b>This process cannot be undone.</b>
                </MudText>
            </MudCardContent>
            <MudCardActions Style="justify-content:end">
                <MudButton OnClick="closeConfirmation" Color="Color.Error">Cancel</MudButton>
                <MudButton OnClick="UpdateJobToClosed24" Color="Color.Success" >Ok</MudButton>
            </MudCardActions>
        </MudCard>

          </MudPopover>
</MudOverlay>

<MudOverlay @bind-Visible="PopUpConfirmLogemtRecive" DarkBackground="true" AutoClose="false">
    <MudPopover Open="@PopUpConfirmLogemtRecive" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">Confirmation</MudText>
                <MudText Typo="Typo.body2">
                    Are you sure you want to perform this action? <b>This process cannot be undone.</b>
                </MudText>
            </MudCardContent>
            <MudCardActions Style="justify-content:end">
                <MudButton OnClick="closeConfirmationLogemtRecive" Color="Color.Error">Cancel</MudButton>
                <MudButton OnClick="UpdateJobtoLogmtDone" Color="Color.Success">Ok</MudButton>
            </MudCardActions>
        </MudCard>

    </MudPopover>
</MudOverlay>


<MudOverlay @bind-Visible="PopUpConfirmLogReq" DarkBackground="true" AutoClose="false">
    <MudPopover Open="@PopUpConfirmLogReq" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter">

        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h6">Confirmation</MudText>
                <MudText Typo="Typo.body2">
                    Are you sure you want to perform this action? <b>This process cannot be undone.</b>
                </MudText>
            </MudCardContent>
            <MudCardActions Style="justify-content:end">
                <MudButton OnClick="closeConfirmationLogReq" Color="Color.Error">Cancel</MudButton>
                <MudButton OnClick="updateStatus" Color="Color.Success">Ok</MudButton>
            </MudCardActions>
        </MudCard>
    </MudPopover>
</MudOverlay>


@code{
    public void GoToJob(FormModel result){constant.FormId = result.JobFormRecord.Id;NavigationManager.NavigateTo("/job", true);}
    public void Navi()
    {
        NavigationManager.NavigateTo("/", forceLoad: true);
    }

    private async Task UpdateJobtoLogmtDone()
    {
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
        try
        {
            DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 23);
            AddRecordClass.AddRecordInFormJob(constant.FormId, 21);
            AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Lodgement Done");
            var obj = formList.FirstOrDefault(x => x.FormId == constant.FormId);
            formList.Remove(obj);
            PopUpConfirmLogemtRecive = false;
        }
        catch (Exception e)
        {
            Snackbar.Add("Try Catch Error: " + e, Severity.Error);
        }
    }
    public void updateStatus()
    {

        UpdateCHKL.UpdateCHKList(new { Id = constant.FormId, isLogemnt = true });
        NavigationManager.NavigateTo("/FunderQueries", forceLoad: true);
    }

    private bool PopUpConfirmLogemtRecive = false;
    private void ShowConfirmationLogemtRecive(FormModel result)
    {

        constant.FormId = result.JobFormRecord.Id;
        PopUpConfirmLogemtRecive = true;


    }
    private void closeConfirmationLogemtRecive()
    {
        constant.FormId = 0;
        PopUpConfirmLogemtRecive = false;

    }


    private bool PopUpConfirmLogReq = false;
    private void ShowConfirmationLogReq(FormModel result)
    {

        constant.FormId = result.JobFormRecord.Id;
        PopUpConfirmLogReq = true;


    }
    private void closeConfirmationLogReq()
    {
        constant.FormId = 0;
        PopUpConfirmLogReq = false;

    }



    private void ShowConfirmation(FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        PopUpConfirm = true;


    }
    private void closeConfirmation()
    {
        constant.FormId = 0;
        PopUpConfirm = false;
    }
    //for popup 2
    private bool isenable = false;
    private bool isloaded = false;
    private bool MudOverlay2;
    private bool PopUpConfirm =false;
    private string TimeValue;
    private string DateValue;
    public string coma { get; set; } = "-";
    private string selectedName;
    private List<string> NameList;
    private string selectedLdGen;
    private void HandleSelectionChange()
    {
        GetMemberNamesByType();
        //xy = selectedLdGen;
        if (string.IsNullOrEmpty(selectedLdGen))
        {

            isenable = true;

        }
        else
        {

            isenable = false;
        }

        StateHasChanged();
    }

    private async Task GetMemberNamesByType()

    {

        using (var httpClient = new HttpClient())
            try
            {
                if (selectedLdGen == null || selectedLdGen == "")
                {
                    Snackbar.Add("Member Type is required!", Severity.Error);
                    return;

                }
                var Data = new
                {
                    Member1 = selectedLdGen
                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.GetMemberNamesByType, content);

                if (response.IsSuccessStatusCode)
                {
                    isloaded = true;
                    var content2 = await response.Content.ReadAsStringAsync();
                    NameList = JsonConvert.DeserializeObject<List<string>>(content2);

                    StateHasChanged();

                }
                else
                {

                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                }


            }
            catch (Exception ex)
            {


                Snackbar.Add(ex.Message, Severity.Error);
            }

    }
    private FormModel selectedResult;

    private void SelectRow(FormModel model)
    {
        selectedResult = model;
    }
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true };

    private void OpenDialog3(DialogOptions options,FormModel  model)
    {
        MudOverlay1 = false;
        constant.FormId = model.JobFormRecord.Id;
        DialogService.Show<SubmissionDoneDialog3>("Custom Options Dialog", options);
    }

    public void OpenOverlay2()
    {
        var dataToSend = queries.Where(q => q.IsSelected)
                                   .Select(q => new { q.Id, q.Status })
                                   .ToList();
        if (dataToSend.Count <= 0)
        {
            Snackbar.Add("Select Query !", Severity.Error);
            return;
        }


        MudOverlay2 = true;
        MudOverlay1 = false;

    }


    //popover 2 end








    private bool LoadList=false;
    private bool MudOverlay1;
    //private bool isVisible2;

    public int bookedCount = 0;
    public void OpenOverlay(FormModel result)
    {
        constant.FormId = result.JobFormRecord.Id;
        queries.Clear();
        QueryLis();


        // StateHasChanged();
    }
    public void ToggleOverlay(bool value) //close 
    {

        queries.Clear();
        //       isVisible2 = value;
        MudOverlay1 = value;
        StateHasChanged();
    }
    public void ClosePopip2(bool value) //close
    {

        queries.Clear();
        MudOverlay1 = value;
        MudOverlay2 = value;
        StateHasChanged();
    }
    public class Q
    {


        public int Id { get; set; }
        public string FunderText { get; set; }
        public string Status { get; set; }
        public string MemberType { get; set; }
        public string Member { get; set; }
        public string MTime { get; set; }
        public string MDate { get; set; }
        public bool IsSelected { get; set; }


    }



    private List<Q> queries = new List<Q>();
    private async Task QueryLis()
    {
        using (var httpClient = new HttpClient())
        {
            try
            {
                var Data = new
                {
                    FormNo = constant.FormId
                };

                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.GetFQList, content);

                if (response.IsSuccessStatusCode)
                {
                    constant.FormId = 0;
                    MudOverlay1 = true;
                    LoadList = true;
                    var content2 = await response.Content.ReadAsStringAsync();
                    //queries = JsonConvert.DeserializeObject<List<Q>>(content2);
                    var tempQueries = JsonConvert.DeserializeObject<List<Q>>(content2);
                    bookedCount = tempQueries.Count(q => q.Status == "Booked");
                    queries = tempQueries.Select(q => new Q
                        {
                            Id = q.Id,
                            FunderText = q.FunderText,
                            MDate = q.MDate,
                            MTime = q.MTime,
                            MemberType = q.MemberType,
                            Member = q.Member,
                            Status = q.Status
                           // IsSelected = q.Status == "Booked"
                        }).ToList();


                    StateHasChanged();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }



    bool loading = true;

    public int ID = 0;
    public string refno = "";

    private List<FormModel> formList = new List<FormModel>();
    public class JobFormRecord
    {
        public int Id { get; set; }
        public string RefNo { get; set; }

        public string AddressLine1 { get; set; }

        public string SurveyName { get; set; }
        public string PropertyNo { get; set; }
        public string Town { get; set; }
        public string Postcode { get; set; }
        public int Status { get; set; }
        public Nullable<bool> isLogemnt { get; set; }
        public List<JobFormNote> JobFormNotes { get; set; }

    }
    public class JobFormNote
    {

        public int Id { get; set; }

        public string Note { get; set; }

        public string CreatedBy { get; set; }

        public Nullable<System.DateTime> CDate { get; set; }

        public Nullable<int> JobFormId { get; set; }

    }
    public class FormModel
    {
        public int Id { get; set; }
        public int FormId { get; set; }
        public int Status { get; set; }
        public string PropertyNo { get; set; }

        public string AddressLine1 { get; set; }

        public string Town { get; set; }

        public string Postcode { get; set; }
        public JobFormRecord JobFormRecord { get; set; }
    }




    protected override async void OnInitialized()
    {

        //base.OnInitialized();

        await  Form1BySat23();
    }

    private async Task Form1BySat23()//get 
    {
        using (var httpClient = new HttpClient())
            try
            {
                var response = await httpClient.GetAsync(constant.Form1BySat23);
                if (response.IsSuccessStatusCode)
                {


                    var jsonString = await response.Content.ReadAsStringAsync();
                    formList = JsonConvert.DeserializeObject<List<FormModel>>(jsonString)
                        .Select(item => new FormModel
                            {
                                Id = item.Id,
                                FormId = item.Id, // Assuming FormId is the same as Id in this context
                                Status = item.Status,
                                JobFormRecord = new JobFormRecord
                                {
                                    Id = item.Id,
                                    RefNo = item.JobFormRecord.RefNo,
                                    AddressLine1 = item.JobFormRecord.AddressLine1,
                                    SurveyName = item.JobFormRecord.SurveyName,
                                    Status = item.Status,
                                    Postcode = item.JobFormRecord.Postcode,
                                    PropertyNo = item.JobFormRecord.PropertyNo,
                                    Town = item.JobFormRecord.Town,
                                    isLogemnt = item.JobFormRecord.isLogemnt,
                                    JobFormNotes = item.JobFormRecord.JobFormNotes // Ensure this is populated correctly
                                }
                            }).ToList(); loading = false;
                    StateHasChanged();
                }
                else
                {
                    loading = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }

            }
            catch (Exception e)
            {

                Snackbar.Add("Try Catch Error: " + e, Severity.Error);
            }

    }
    DateTime londonTime;







    private void OpenDialog(DialogOptions options, FormModel result)
    {
        constant.FormId = result.FormId;
        constant.refno = result.JobFormRecord.RefNo;
        DialogService.Show<ViewJobDetailsDialog>("view details", options);
    }





    private async Task UpdateJobToClosed24()

    {
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
        using (var httpClient = new HttpClient())
            try
            {

                var Data = new
                {
                    Id = constant.FormId
                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.UpdateJobBooked24, content);

                if (response.IsSuccessStatusCode)
                {


                    var message = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(message, Severity.Success);

                    DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 23);
                    AddRecordClass.AddRecordInFormJob(constant.FormId, 24);
                    AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Query Done");
                    var obj = formList.FirstOrDefault(x => x.FormId == constant.FormId);
                    formList.Remove(obj);
                    StateHasChanged();
                    // NavigationManager.NavigateTo("/HCInstallation", forceLoad: true);
                    
                    PopUpConfirm = false;
                }
                else
                {

                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                }


            }
            catch (Exception ex)
            {

                Snackbar.Add(ex.Message, Severity.Error);
            }

    }
    private async Task OnSubmit()
    {
        //var dataToSend = queries.Select(q => new { q.Id, q.Status }).ToList(); //all records
        // var dataToSend = queries
        // .Where(q => q.Status != "Awaiting") // Filter out records where Status is "Awaiting"
        // .Select(q => new { q.Id, q.Status, MemberType = selectedLdGen, Member = selectedName, MTime = TimeValue, MDate = DateValue })
        // .ToList();

        //below are the only Selected 
        var dataToSend = queries.Where(q => q.IsSelected)
                           .Select(q => new { q.Id, q.Status, MemberType = selectedLdGen, Member = selectedName, MTime = TimeValue, MDate = DateValue })
                           .ToList();


        if (dataToSend.Count == 0)
        {
            Snackbar.Add("Select Query !", Severity.Error);
            return;
        }
        using (var httpClient = new HttpClient())
        {
            try
            {
                string jsonData = JsonConvert.SerializeObject(dataToSend);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.FQUpdateStatus, content);

                if (response.IsSuccessStatusCode)
                {
                    queries.Clear();
                    MudOverlay1 = false;
                    MudOverlay2 = false;
                    StateHasChanged();
                    Snackbar.Add("Booked Successfully!", Severity.Success);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }

        }
    }
    private async Task OnDoneSubmit()
    {
        //var dataToSend = queries.Select(q => new { q.Id, q.Status }).ToList(); //all records
        var dataToSend = queries.Where(q => q.IsSelected)
                                   .Select(q => new { q.Id, q.Status })
                                   .ToList();

        if (dataToSend.Count == 0)
        {
            Snackbar.Add("Select Query !", Severity.Error);
            return;
        }
        using (var httpClient = new HttpClient())
        {
            try
            {
                string jsonData = JsonConvert.SerializeObject(dataToSend);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.UpdateStatusToDone, content);

                if (response.IsSuccessStatusCode)
                {
                    queries.Clear();
                    MudOverlay1 = false;
                    MudOverlay2 = false;
                    StateHasChanged();
                    Snackbar.Add("Done Successfully!", Severity.Success);
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }

        }


    }


}

