@using ERPHamza.Data
@using System.Net.Http.Json
@using System.Text;
@using ERPHamza.Data.MyClasses
@using Newtonsoft.Json
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
<style>

    /* Optional: You can add CSS to style the table */
    .mud-dialog-content {
        background: #F3F3F3;
    }

    .card {
        box-shadow: 0 1rem 2rem hsl(0 0% 0% / 20%);
        gap: 5vmin;
        background: hsl(0 0% 100%);
        color: hsl(200 50% 20%);
        line-height: 1.5;
        font-size: 1.5rem;
        font-weight: 300;
        width: 100%;
        height: 35vmin;
        display: flex;
        border-radius: 1ch;
        border: 1px solid hsl(0 0% 83%);
        display: grid;
        grid-auto-flow: column;
    }



    my {
        block-size: 100%;
        inline-size: 100%;
        background: hsl(0 0% 85%);
    }

</style>
<MudDialog TitleClass="mud-primary">
    <TitleContent>
        <MudText Typo="Typo.h6" style="color: white;">Funder Queries</MudText>
    </TitleContent>
    <DialogContent>

        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <!-- First row -->
                    <MudItem xs="4">
                        @if (loaded)
                        {
                            <MudSelect Variant="Variant.Outlined" Margin="Margin.Dense" Label="Funder Name" @bind-Value="selectedFunderName">
                                <MudSelectItem T="string" Value="null" Label="Select" />
                                @foreach (var make in MakeList)
                                {
                                    <MudSelectItem Value="make" Label="@make" />
                                }
                            </MudSelect>
                        }
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField @bind-Value="TextValue" Label="Funder Query Text" Variant="Variant.Outlined" Margin="Margin.Dense" Style="width:100%;"></MudTextField>
                    </MudItem>
                    <MudItem xs="4" style="display:flex;">
                        <MudButton Disabled="@_processing" OnClick="AddItem" Variant="Variant.Filled" Color="Color.Success" Style="width:50%; height:40px; margin-top:5px;">
                            @if (_processing)
                            {
                                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                <MudText Class="ms-2">Processing</MudText>
                            }
                            else
                            {
                                <MudText>Add New</MudText>
                            }
                        </MudButton>
                       @*  <MudButton OnClick="AddItem">Add item2list</MudButton> *@
                        <MudItem xs="2" Class="ml-1">
                            <MudButton Disabled="@_processing2" OnClick="saveList" Variant="Variant.Filled" Color="Color.Success" Style="width:50%; height:40px; margin-top:5px;">
                                @if (_processing2)
                                {
                                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                                    <MudText Class="ms-2">Processing</MudText>
                                }
                                else
                                {
                                    <MudText>Save</MudText>
                                }
                            </MudButton>

                        </MudItem>
                    </MudItem>


                    <div>
                        @foreach (var item in items)
                        {
                            <div class="item-row ml-1" style="border-bottom:1px solid black">
                              
                                <MudText Typo="Typo.body1">@item.Dropdown</MudText>
                                

                                <MudText Typo="Typo.body1">@item.Text</MudText>
                              

                                <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => RemoveItem(item))" />
                                
                            </div>
                        }
                    </div>
                    <style>
                        .item-row {
                            display: flex;
                            align-items: center;
                            gap: 1rem;
                            margin-bottom: 0.5rem;
                        }
                    </style>




                </MudGrid>

               
            </MudCardContent>
        </MudCard>





    </DialogContent>
    @*     <DialogActions>
    <MudButton OnClick="Cancel">Cancel</MudButton>
    <MudButton Color="Color.Primary" OnClick="Submit">Ok</MudButton>
    </DialogActions> *@
</MudDialog>


@code{


    private void AddItem()
    {
        if (!string.IsNullOrEmpty(selectedFunderName) && !string.IsNullOrEmpty(TextValue))
        {
            items.Add(new Item { Dropdown = selectedFunderName, Text = TextValue });
            selectedFunderName = string.Empty;
            TextValue = string.Empty;
        }

    }

    private void RemoveItem(Item item)
    {
        items.Remove(item);
    }
    private List<Item> items = new List<Item>();
    private class Item
    {
        public string Dropdown { get; set; }
        public string Text { get; set; }
        public int FormNo { get; set; }=constant.FormId;
    }

    private async Task saveList()
    {
        var dataToSend = items.ToList(); 
        if(dataToSend.Count == 0)
        {
            Snackbar.Add("No items to save", Severity.Error);
            return;
        }
        // UpdateJobBooked23();
        using (var httpClient = new HttpClient())
        {
            _processing=true;
            try
            {
                string jsonData = JsonConvert.SerializeObject(dataToSend);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.SaveFQItemsList, content);

                if (response.IsSuccessStatusCode)
                {

                    UpdateJobBooked23();
                    _processing=false;
                    StateHasChanged();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);
                    _processing = false;
                }
            }
            catch (Exception ex)
            {
                _processing = false;
                Snackbar.Add(ex.Message, Severity.Error);
            }

        }


    }







    public string TextValue { get; set; }

    private bool _processing = false;
    private bool _processing2 = false;
    DateTime? date = DateTime.Today;
    DateTime londonTime;
    TimeSpan? time = new TimeSpan(18, 45, 00); // Example time
    private string formattedTime;
    private void OnTimePickerClosed()
    {
        if (time.HasValue)
        {
            DateTime dateTime = DateTime.Today.Add(time.Value);
            formattedTime = dateTime.ToString("hh:mm tt");
        }
        else
        {
            formattedTime = "No time selected";
        }
    }





    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();


    protected override async void OnInitialized()
    {


        await FunderNameList();
    }

    private string selectedFunderName;
    bool loaded = false;
    private List<string> MakeList;
    private async Task FunderNameList()
    {
        try
        {



            var client = new HttpClient();
            var response = await client.GetAsync(constant.GetFunderName);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                MakeList = JsonConvert.DeserializeObject<List<string>>(content);
                loaded = true;
                StateHasChanged();

            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Snackbar.Add(errorMessage, Severity.Error);
            }
        }
        catch (Exception e)
        {

            Snackbar.Add(e.ToString(), Severity.Error);
        }
    }


    private async Task UpdateJobBooked23()

    {
        DateTime utcTime = DateTime.UtcNow;
        TimeZoneInfo londonTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Europe/London");
        londonTime = TimeZoneInfo.ConvertTimeFromUtc(utcTime, londonTimeZone);
        _processing2 = true;
        using (var httpClient = new HttpClient())
            try
            {

                var Data = new
                {
                    Id = constant.FormId,
                    FunderName=selectedFunderName,
                    FunderQText=TextValue


                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.UpdateJobBooked23, content);

                if (response.IsSuccessStatusCode)
                {
                    _processing2 = false;
                    var message = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(message, Severity.Success);
                    DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 22);
                    AddRecordClass.AddRecordInFormJob(constant.FormId, 23);
                    AuditClasss.Audit(constant.FormId, constant.LoginUserName, londonTime, "Submission Done");

                     NavigationManager.NavigateTo("/SubmissionDone",  true);

                }
                else
                {
                    _processing2 = false;
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                }


            }
            catch (Exception ex)
            {
                // Handle exceptions
                Console.WriteLine("An error occurred: " + ex.Message);
                Snackbar.Add(ex.Message, Severity.Error);
            }

    }

    private async Task AddFQRecord()

    {
        if (string.IsNullOrEmpty(selectedFunderName))
        {
            Snackbar.Add("Funder Name is required", Severity.Error);
            return;
        }
        using (var httpClient = new HttpClient())
            try
            {

                var Data = new
                {
                    FormNo = constant.FormId,
                    FunderName=selectedFunderName,
                    FunderText=TextValue,
                    Status="Awaiting"


                };


                string jsonData = JsonConvert.SerializeObject(Data);
                var content = new StringContent(jsonData, Encoding.UTF8, "application/json");

                var response = await httpClient.PostAsync(constant.AddFQ, content);

                if (response.IsSuccessStatusCode)
                {

                    var message = await response.Content.ReadAsStringAsync();
                    Snackbar.Add("Success", Severity.Success);
                    //Snackbar.Add(message, Severity.Success);
                    // DeleteRecordClass.DeleteRecordInFormJob(constant.FormId, 22);
                    //AddRecordClass.AddRecordInFormJob(constant.FormId, 23);
                    //AuditClasss.Audit(constant.FormId, constant.LoginUserName, date2, "Submission Done");
                    selectedFunderName = "";
                    TextValue = "";
                    //NavigationManager.NavigateTo("/SubmissionDone",  true);

                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add(errorMessage, Severity.Error);


                    }


            }
            catch (Exception ex)
            {
                // Handle exceptions
                Console.WriteLine("An error occurred: " + ex.Message);
                Snackbar.Add(ex.Message, Severity.Error);
            }

    }

}